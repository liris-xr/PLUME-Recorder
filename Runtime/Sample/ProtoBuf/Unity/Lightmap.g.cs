// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: unity/lightmap.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PLUME.Sample.Unity {

  /// <summary>Holder for reflection information generated from unity/lightmap.proto</summary>
  public static partial class LightmapReflection {

    #region Descriptor
    /// <summary>File descriptor for unity/lightmap.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LightmapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChR1bml0eS9saWdodG1hcC5wcm90bxIScGx1bWUuc2FtcGxlLnVuaXR5Ghd1",
            "bml0eS9pZGVudGlmaWVycy5wcm90byKGAQoPTGlnaHRtYXBzVXBkYXRlEjkK",
            "DmxpZ2h0bWFwc19tb2RlGAEgASgOMiEucGx1bWUuc2FtcGxlLnVuaXR5Lkxp",
            "Z2h0bWFwc01vZGUSOAoObGlnaHRtYXBzX2RhdGEYAiADKAsyIC5wbHVtZS5z",
            "YW1wbGUudW5pdHkuTGlnaHRtYXBEYXRhItcCCgxMaWdodG1hcERhdGESSwoZ",
            "bGlnaHRtYXBfY29sb3JfdGV4dHVyZV9pZBgBIAEoCzIjLnBsdW1lLnNhbXBs",
            "ZS51bml0eS5Bc3NldElkZW50aWZpZXJIAIgBARJJChdsaWdodG1hcF9kaXJf",
            "dGV4dHVyZV9pZBgCIAEoCzIjLnBsdW1lLnNhbXBsZS51bml0eS5Bc3NldElk",
            "ZW50aWZpZXJIAYgBARJRCh9saWdodG1hcF9zaGFkb3dfbWFza190ZXh0dXJl",
            "X2lkGAMgASgLMiMucGx1bWUuc2FtcGxlLnVuaXR5LkFzc2V0SWRlbnRpZmll",
            "ckgCiAEBQhwKGl9saWdodG1hcF9jb2xvcl90ZXh0dXJlX2lkQhoKGF9saWdo",
            "dG1hcF9kaXJfdGV4dHVyZV9pZEIiCiBfbGlnaHRtYXBfc2hhZG93X21hc2tf",
            "dGV4dHVyZV9pZCpcCg1MaWdodG1hcHNNb2RlEiIKHkxJR0hUTUFQU19NT0RF",
            "X05PTl9ESVJFQ1RJT05BTBAAEicKI0xJR0hUTUFQU19NT0RFX0NPTUJJTkVE",
            "X0RJUkVDVElPTkFMEAFCFaoCElBMVU1FLlNhbXBsZS5Vbml0eWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PLUME.Sample.Unity.IdentifiersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PLUME.Sample.Unity.LightmapsMode), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PLUME.Sample.Unity.LightmapsUpdate), global::PLUME.Sample.Unity.LightmapsUpdate.Parser, new[]{ "LightmapsMode", "LightmapsData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PLUME.Sample.Unity.LightmapData), global::PLUME.Sample.Unity.LightmapData.Parser, new[]{ "LightmapColorTextureId", "LightmapDirTextureId", "LightmapShadowMaskTextureId" }, new[]{ "LightmapColorTextureId", "LightmapDirTextureId", "LightmapShadowMaskTextureId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LightmapsMode {
    [pbr::OriginalName("LIGHTMAPS_MODE_NON_DIRECTIONAL")] NonDirectional = 0,
    [pbr::OriginalName("LIGHTMAPS_MODE_COMBINED_DIRECTIONAL")] CombinedDirectional = 1,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LightmapsUpdate : pb::IMessage<LightmapsUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LightmapsUpdate> _parser = new pb::MessageParser<LightmapsUpdate>(() => new LightmapsUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LightmapsUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLUME.Sample.Unity.LightmapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LightmapsUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LightmapsUpdate(LightmapsUpdate other) : this() {
      lightmapsMode_ = other.lightmapsMode_;
      lightmapsData_ = other.lightmapsData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LightmapsUpdate Clone() {
      return new LightmapsUpdate(this);
    }

    /// <summary>Field number for the "lightmaps_mode" field.</summary>
    public const int LightmapsModeFieldNumber = 1;
    private global::PLUME.Sample.Unity.LightmapsMode lightmapsMode_ = global::PLUME.Sample.Unity.LightmapsMode.NonDirectional;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.LightmapsMode LightmapsMode {
      get { return lightmapsMode_; }
      set {
        lightmapsMode_ = value;
      }
    }

    /// <summary>Field number for the "lightmaps_data" field.</summary>
    public const int LightmapsDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PLUME.Sample.Unity.LightmapData> _repeated_lightmapsData_codec
        = pb::FieldCodec.ForMessage(18, global::PLUME.Sample.Unity.LightmapData.Parser);
    private readonly pbc::RepeatedField<global::PLUME.Sample.Unity.LightmapData> lightmapsData_ = new pbc::RepeatedField<global::PLUME.Sample.Unity.LightmapData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::PLUME.Sample.Unity.LightmapData> LightmapsData {
      get { return lightmapsData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LightmapsUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LightmapsUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LightmapsMode != other.LightmapsMode) return false;
      if(!lightmapsData_.Equals(other.lightmapsData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (LightmapsMode != global::PLUME.Sample.Unity.LightmapsMode.NonDirectional) hash ^= LightmapsMode.GetHashCode();
      hash ^= lightmapsData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LightmapsMode != global::PLUME.Sample.Unity.LightmapsMode.NonDirectional) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LightmapsMode);
      }
      lightmapsData_.WriteTo(output, _repeated_lightmapsData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LightmapsMode != global::PLUME.Sample.Unity.LightmapsMode.NonDirectional) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LightmapsMode);
      }
      lightmapsData_.WriteTo(ref output, _repeated_lightmapsData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (LightmapsMode != global::PLUME.Sample.Unity.LightmapsMode.NonDirectional) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LightmapsMode);
      }
      size += lightmapsData_.CalculateSize(_repeated_lightmapsData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LightmapsUpdate other) {
      if (other == null) {
        return;
      }
      if (other.LightmapsMode != global::PLUME.Sample.Unity.LightmapsMode.NonDirectional) {
        LightmapsMode = other.LightmapsMode;
      }
      lightmapsData_.Add(other.lightmapsData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LightmapsMode = (global::PLUME.Sample.Unity.LightmapsMode) input.ReadEnum();
            break;
          }
          case 18: {
            lightmapsData_.AddEntriesFrom(input, _repeated_lightmapsData_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LightmapsMode = (global::PLUME.Sample.Unity.LightmapsMode) input.ReadEnum();
            break;
          }
          case 18: {
            lightmapsData_.AddEntriesFrom(ref input, _repeated_lightmapsData_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LightmapData : pb::IMessage<LightmapData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LightmapData> _parser = new pb::MessageParser<LightmapData>(() => new LightmapData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LightmapData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLUME.Sample.Unity.LightmapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LightmapData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LightmapData(LightmapData other) : this() {
      lightmapColorTextureId_ = other.lightmapColorTextureId_ != null ? other.lightmapColorTextureId_.Clone() : null;
      lightmapDirTextureId_ = other.lightmapDirTextureId_ != null ? other.lightmapDirTextureId_.Clone() : null;
      lightmapShadowMaskTextureId_ = other.lightmapShadowMaskTextureId_ != null ? other.lightmapShadowMaskTextureId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LightmapData Clone() {
      return new LightmapData(this);
    }

    /// <summary>Field number for the "lightmap_color_texture_id" field.</summary>
    public const int LightmapColorTextureIdFieldNumber = 1;
    private global::PLUME.Sample.Unity.AssetIdentifier lightmapColorTextureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.AssetIdentifier LightmapColorTextureId {
      get { return lightmapColorTextureId_; }
      set {
        lightmapColorTextureId_ = value;
      }
    }

    /// <summary>Field number for the "lightmap_dir_texture_id" field.</summary>
    public const int LightmapDirTextureIdFieldNumber = 2;
    private global::PLUME.Sample.Unity.AssetIdentifier lightmapDirTextureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.AssetIdentifier LightmapDirTextureId {
      get { return lightmapDirTextureId_; }
      set {
        lightmapDirTextureId_ = value;
      }
    }

    /// <summary>Field number for the "lightmap_shadow_mask_texture_id" field.</summary>
    public const int LightmapShadowMaskTextureIdFieldNumber = 3;
    private global::PLUME.Sample.Unity.AssetIdentifier lightmapShadowMaskTextureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.AssetIdentifier LightmapShadowMaskTextureId {
      get { return lightmapShadowMaskTextureId_; }
      set {
        lightmapShadowMaskTextureId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LightmapData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LightmapData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LightmapColorTextureId, other.LightmapColorTextureId)) return false;
      if (!object.Equals(LightmapDirTextureId, other.LightmapDirTextureId)) return false;
      if (!object.Equals(LightmapShadowMaskTextureId, other.LightmapShadowMaskTextureId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (lightmapColorTextureId_ != null) hash ^= LightmapColorTextureId.GetHashCode();
      if (lightmapDirTextureId_ != null) hash ^= LightmapDirTextureId.GetHashCode();
      if (lightmapShadowMaskTextureId_ != null) hash ^= LightmapShadowMaskTextureId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (lightmapColorTextureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LightmapColorTextureId);
      }
      if (lightmapDirTextureId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LightmapDirTextureId);
      }
      if (lightmapShadowMaskTextureId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LightmapShadowMaskTextureId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (lightmapColorTextureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LightmapColorTextureId);
      }
      if (lightmapDirTextureId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LightmapDirTextureId);
      }
      if (lightmapShadowMaskTextureId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LightmapShadowMaskTextureId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (lightmapColorTextureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightmapColorTextureId);
      }
      if (lightmapDirTextureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightmapDirTextureId);
      }
      if (lightmapShadowMaskTextureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightmapShadowMaskTextureId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LightmapData other) {
      if (other == null) {
        return;
      }
      if (other.lightmapColorTextureId_ != null) {
        if (lightmapColorTextureId_ == null) {
          LightmapColorTextureId = new global::PLUME.Sample.Unity.AssetIdentifier();
        }
        LightmapColorTextureId.MergeFrom(other.LightmapColorTextureId);
      }
      if (other.lightmapDirTextureId_ != null) {
        if (lightmapDirTextureId_ == null) {
          LightmapDirTextureId = new global::PLUME.Sample.Unity.AssetIdentifier();
        }
        LightmapDirTextureId.MergeFrom(other.LightmapDirTextureId);
      }
      if (other.lightmapShadowMaskTextureId_ != null) {
        if (lightmapShadowMaskTextureId_ == null) {
          LightmapShadowMaskTextureId = new global::PLUME.Sample.Unity.AssetIdentifier();
        }
        LightmapShadowMaskTextureId.MergeFrom(other.LightmapShadowMaskTextureId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lightmapColorTextureId_ == null) {
              LightmapColorTextureId = new global::PLUME.Sample.Unity.AssetIdentifier();
            }
            input.ReadMessage(LightmapColorTextureId);
            break;
          }
          case 18: {
            if (lightmapDirTextureId_ == null) {
              LightmapDirTextureId = new global::PLUME.Sample.Unity.AssetIdentifier();
            }
            input.ReadMessage(LightmapDirTextureId);
            break;
          }
          case 26: {
            if (lightmapShadowMaskTextureId_ == null) {
              LightmapShadowMaskTextureId = new global::PLUME.Sample.Unity.AssetIdentifier();
            }
            input.ReadMessage(LightmapShadowMaskTextureId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (lightmapColorTextureId_ == null) {
              LightmapColorTextureId = new global::PLUME.Sample.Unity.AssetIdentifier();
            }
            input.ReadMessage(LightmapColorTextureId);
            break;
          }
          case 18: {
            if (lightmapDirTextureId_ == null) {
              LightmapDirTextureId = new global::PLUME.Sample.Unity.AssetIdentifier();
            }
            input.ReadMessage(LightmapDirTextureId);
            break;
          }
          case 26: {
            if (lightmapShadowMaskTextureId_ == null) {
              LightmapShadowMaskTextureId = new global::PLUME.Sample.Unity.AssetIdentifier();
            }
            input.ReadMessage(LightmapShadowMaskTextureId);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
