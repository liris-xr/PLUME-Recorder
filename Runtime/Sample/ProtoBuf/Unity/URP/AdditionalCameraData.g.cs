// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: unity/urp/additional_camera_data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PLUME.Sample.Unity.URP {

  /// <summary>Holder for reflection information generated from unity/urp/additional_camera_data.proto</summary>
  public static partial class AdditionalCameraDataReflection {

    #region Descriptor
    /// <summary>File descriptor for unity/urp/additional_camera_data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AdditionalCameraDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZ1bml0eS91cnAvYWRkaXRpb25hbF9jYW1lcmFfZGF0YS5wcm90bxIWcGx1",
            "bWUuc2FtcGxlLnVuaXR5LnVycBoXdW5pdHkvaWRlbnRpZmllcnMucHJvdG8a",
            "FXVuaXR5L3JlbmRlcmluZy5wcm90byJRChpBZGRpdGlvbmFsQ2FtZXJhRGF0",
            "YUNyZWF0ZRIzCgJpZBgBIAEoCzInLnBsdW1lLnNhbXBsZS51bml0eS5Db21w",
            "b25lbnRJZGVudGlmaWVyIuAFChpBZGRpdGlvbmFsQ2FtZXJhRGF0YVVwZGF0",
            "ZRIzCgJpZBgBIAEoCzInLnBsdW1lLnNhbXBsZS51bml0eS5Db21wb25lbnRJ",
            "ZGVudGlmaWVyEg8KB3ZlcnNpb24YAiABKAISFgoOcmVuZGVyX3NoYWRvd3MY",
            "AyABKAgSSwoVcmVxdWlyZXNfZGVwdGhfb3B0aW9uGAQgASgOMiwucGx1bWUu",
            "c2FtcGxlLnVuaXR5LnVycC5DYW1lcmFPdmVycmlkZU9wdGlvbhJLChVyZXF1",
            "aXJlc19jb2xvcl9vcHRpb24YBSABKA4yLC5wbHVtZS5zYW1wbGUudW5pdHku",
            "dXJwLkNhbWVyYU92ZXJyaWRlT3B0aW9uEj0KC3JlbmRlcl90eXBlGAYgASgO",
            "MigucGx1bWUuc2FtcGxlLnVuaXR5LnVycC5DYW1lcmFSZW5kZXJUeXBlEh4K",
            "FnJlcXVpcmVzX2RlcHRoX3RleHR1cmUYByABKAgSHgoWcmVxdWlyZXNfY29s",
            "b3JfdGV4dHVyZRgIIAEoCBIZChF2b2x1bWVfbGF5ZXJfbWFzaxgJIAEoBRJM",
            "ChF2b2x1bWVfdHJpZ2dlcl9pZBgKIAEoCzIxLnBsdW1lLnNhbXBsZS51bml0",
            "eS5UcmFuc2Zvcm1HYW1lT2JqZWN0SWRlbnRpZmllchIeChZyZW5kZXJfcG9z",
            "dF9wcm9jZXNzaW5nGAsgASgIEjoKDGFudGlhbGlhc2luZxgMIAEoDjIkLnBs",
            "dW1lLnNhbXBsZS51bml0eS5BbnRpYWxpYXNpbmdNb2RlEkUKFGFudGlhbGlh",
            "c2luZ19xdWFsaXR5GA0gASgOMicucGx1bWUuc2FtcGxlLnVuaXR5LkFudGlh",
            "bGlhc2luZ1F1YWxpdHkSEAoIc3RvcF9uYW4YDiABKAgSEQoJZGl0aGVyaW5n",
            "GA8gASgIEhoKEmFsbG93X3hyX3JlbmRlcmluZxgQIAEoCCqHAQoUQ2FtZXJh",
            "T3ZlcnJpZGVPcHRpb24SHgoaQ0FNRVJBX09WRVJSSURFX09QVElPTl9PRkYQ",
            "ABIdChlDQU1FUkFfT1ZFUlJJREVfT1BUSU9OX09OEAESMAosQ0FNRVJBX09W",
            "RVJSSURFX09QVElPTl9VU0VfUElQRUxJTkVfU0VUVElOR1MQAipPChBDYW1l",
            "cmFSZW5kZXJUeXBlEhsKF0NBTUVSQV9SRU5ERVJfVFlQRV9CQVNFEAASHgoa",
            "Q0FNRVJBX1JFTkRFUl9UWVBFX09WRVJMQVkQAUIZqgIWUExVTUUuU2FtcGxl",
            "LlVuaXR5LlVSUGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PLUME.Sample.Unity.IdentifiersReflection.Descriptor, global::PLUME.Sample.Unity.RenderingReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PLUME.Sample.Unity.URP.CameraOverrideOption), typeof(global::PLUME.Sample.Unity.URP.CameraRenderType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PLUME.Sample.Unity.URP.AdditionalCameraDataCreate), global::PLUME.Sample.Unity.URP.AdditionalCameraDataCreate.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PLUME.Sample.Unity.URP.AdditionalCameraDataUpdate), global::PLUME.Sample.Unity.URP.AdditionalCameraDataUpdate.Parser, new[]{ "Id", "Version", "RenderShadows", "RequiresDepthOption", "RequiresColorOption", "RenderType", "RequiresDepthTexture", "RequiresColorTexture", "VolumeLayerMask", "VolumeTriggerId", "RenderPostProcessing", "Antialiasing", "AntialiasingQuality", "StopNan", "Dithering", "AllowXrRendering" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CameraOverrideOption {
    [pbr::OriginalName("CAMERA_OVERRIDE_OPTION_OFF")] Off = 0,
    [pbr::OriginalName("CAMERA_OVERRIDE_OPTION_ON")] On = 1,
    [pbr::OriginalName("CAMERA_OVERRIDE_OPTION_USE_PIPELINE_SETTINGS")] UsePipelineSettings = 2,
  }

  public enum CameraRenderType {
    [pbr::OriginalName("CAMERA_RENDER_TYPE_BASE")] Base = 0,
    [pbr::OriginalName("CAMERA_RENDER_TYPE_OVERLAY")] Overlay = 1,
  }

  #endregion

  #region Messages
  public sealed partial class AdditionalCameraDataCreate : pb::IMessage<AdditionalCameraDataCreate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdditionalCameraDataCreate> _parser = new pb::MessageParser<AdditionalCameraDataCreate>(() => new AdditionalCameraDataCreate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdditionalCameraDataCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLUME.Sample.Unity.URP.AdditionalCameraDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdditionalCameraDataCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdditionalCameraDataCreate(AdditionalCameraDataCreate other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdditionalCameraDataCreate Clone() {
      return new AdditionalCameraDataCreate(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::PLUME.Sample.Unity.ComponentIdentifier id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.ComponentIdentifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdditionalCameraDataCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdditionalCameraDataCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdditionalCameraDataCreate other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
        }
        Id.MergeFrom(other.Id);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AdditionalCameraDataUpdate : pb::IMessage<AdditionalCameraDataUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AdditionalCameraDataUpdate> _parser = new pb::MessageParser<AdditionalCameraDataUpdate>(() => new AdditionalCameraDataUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AdditionalCameraDataUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLUME.Sample.Unity.URP.AdditionalCameraDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdditionalCameraDataUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdditionalCameraDataUpdate(AdditionalCameraDataUpdate other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      version_ = other.version_;
      renderShadows_ = other.renderShadows_;
      requiresDepthOption_ = other.requiresDepthOption_;
      requiresColorOption_ = other.requiresColorOption_;
      renderType_ = other.renderType_;
      requiresDepthTexture_ = other.requiresDepthTexture_;
      requiresColorTexture_ = other.requiresColorTexture_;
      volumeLayerMask_ = other.volumeLayerMask_;
      volumeTriggerId_ = other.volumeTriggerId_ != null ? other.volumeTriggerId_.Clone() : null;
      renderPostProcessing_ = other.renderPostProcessing_;
      antialiasing_ = other.antialiasing_;
      antialiasingQuality_ = other.antialiasingQuality_;
      stopNan_ = other.stopNan_;
      dithering_ = other.dithering_;
      allowXrRendering_ = other.allowXrRendering_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AdditionalCameraDataUpdate Clone() {
      return new AdditionalCameraDataUpdate(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::PLUME.Sample.Unity.ComponentIdentifier id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.ComponentIdentifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private float version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "render_shadows" field.</summary>
    public const int RenderShadowsFieldNumber = 3;
    private bool renderShadows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RenderShadows {
      get { return renderShadows_; }
      set {
        renderShadows_ = value;
      }
    }

    /// <summary>Field number for the "requires_depth_option" field.</summary>
    public const int RequiresDepthOptionFieldNumber = 4;
    private global::PLUME.Sample.Unity.URP.CameraOverrideOption requiresDepthOption_ = global::PLUME.Sample.Unity.URP.CameraOverrideOption.Off;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.URP.CameraOverrideOption RequiresDepthOption {
      get { return requiresDepthOption_; }
      set {
        requiresDepthOption_ = value;
      }
    }

    /// <summary>Field number for the "requires_color_option" field.</summary>
    public const int RequiresColorOptionFieldNumber = 5;
    private global::PLUME.Sample.Unity.URP.CameraOverrideOption requiresColorOption_ = global::PLUME.Sample.Unity.URP.CameraOverrideOption.Off;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.URP.CameraOverrideOption RequiresColorOption {
      get { return requiresColorOption_; }
      set {
        requiresColorOption_ = value;
      }
    }

    /// <summary>Field number for the "render_type" field.</summary>
    public const int RenderTypeFieldNumber = 6;
    private global::PLUME.Sample.Unity.URP.CameraRenderType renderType_ = global::PLUME.Sample.Unity.URP.CameraRenderType.Base;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.URP.CameraRenderType RenderType {
      get { return renderType_; }
      set {
        renderType_ = value;
      }
    }

    /// <summary>Field number for the "requires_depth_texture" field.</summary>
    public const int RequiresDepthTextureFieldNumber = 7;
    private bool requiresDepthTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RequiresDepthTexture {
      get { return requiresDepthTexture_; }
      set {
        requiresDepthTexture_ = value;
      }
    }

    /// <summary>Field number for the "requires_color_texture" field.</summary>
    public const int RequiresColorTextureFieldNumber = 8;
    private bool requiresColorTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RequiresColorTexture {
      get { return requiresColorTexture_; }
      set {
        requiresColorTexture_ = value;
      }
    }

    /// <summary>Field number for the "volume_layer_mask" field.</summary>
    public const int VolumeLayerMaskFieldNumber = 9;
    private int volumeLayerMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VolumeLayerMask {
      get { return volumeLayerMask_; }
      set {
        volumeLayerMask_ = value;
      }
    }

    /// <summary>Field number for the "volume_trigger_id" field.</summary>
    public const int VolumeTriggerIdFieldNumber = 10;
    private global::PLUME.Sample.Unity.TransformGameObjectIdentifier volumeTriggerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.TransformGameObjectIdentifier VolumeTriggerId {
      get { return volumeTriggerId_; }
      set {
        volumeTriggerId_ = value;
      }
    }

    /// <summary>Field number for the "render_post_processing" field.</summary>
    public const int RenderPostProcessingFieldNumber = 11;
    private bool renderPostProcessing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RenderPostProcessing {
      get { return renderPostProcessing_; }
      set {
        renderPostProcessing_ = value;
      }
    }

    /// <summary>Field number for the "antialiasing" field.</summary>
    public const int AntialiasingFieldNumber = 12;
    private global::PLUME.Sample.Unity.AntialiasingMode antialiasing_ = global::PLUME.Sample.Unity.AntialiasingMode.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.AntialiasingMode Antialiasing {
      get { return antialiasing_; }
      set {
        antialiasing_ = value;
      }
    }

    /// <summary>Field number for the "antialiasing_quality" field.</summary>
    public const int AntialiasingQualityFieldNumber = 13;
    private global::PLUME.Sample.Unity.AntialiasingQuality antialiasingQuality_ = global::PLUME.Sample.Unity.AntialiasingQuality.Low;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.AntialiasingQuality AntialiasingQuality {
      get { return antialiasingQuality_; }
      set {
        antialiasingQuality_ = value;
      }
    }

    /// <summary>Field number for the "stop_nan" field.</summary>
    public const int StopNanFieldNumber = 14;
    private bool stopNan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool StopNan {
      get { return stopNan_; }
      set {
        stopNan_ = value;
      }
    }

    /// <summary>Field number for the "dithering" field.</summary>
    public const int DitheringFieldNumber = 15;
    private bool dithering_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Dithering {
      get { return dithering_; }
      set {
        dithering_ = value;
      }
    }

    /// <summary>Field number for the "allow_xr_rendering" field.</summary>
    public const int AllowXrRenderingFieldNumber = 16;
    private bool allowXrRendering_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowXrRendering {
      get { return allowXrRendering_; }
      set {
        allowXrRendering_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AdditionalCameraDataUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AdditionalCameraDataUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Version, other.Version)) return false;
      if (RenderShadows != other.RenderShadows) return false;
      if (RequiresDepthOption != other.RequiresDepthOption) return false;
      if (RequiresColorOption != other.RequiresColorOption) return false;
      if (RenderType != other.RenderType) return false;
      if (RequiresDepthTexture != other.RequiresDepthTexture) return false;
      if (RequiresColorTexture != other.RequiresColorTexture) return false;
      if (VolumeLayerMask != other.VolumeLayerMask) return false;
      if (!object.Equals(VolumeTriggerId, other.VolumeTriggerId)) return false;
      if (RenderPostProcessing != other.RenderPostProcessing) return false;
      if (Antialiasing != other.Antialiasing) return false;
      if (AntialiasingQuality != other.AntialiasingQuality) return false;
      if (StopNan != other.StopNan) return false;
      if (Dithering != other.Dithering) return false;
      if (AllowXrRendering != other.AllowXrRendering) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Version != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Version);
      if (RenderShadows != false) hash ^= RenderShadows.GetHashCode();
      if (RequiresDepthOption != global::PLUME.Sample.Unity.URP.CameraOverrideOption.Off) hash ^= RequiresDepthOption.GetHashCode();
      if (RequiresColorOption != global::PLUME.Sample.Unity.URP.CameraOverrideOption.Off) hash ^= RequiresColorOption.GetHashCode();
      if (RenderType != global::PLUME.Sample.Unity.URP.CameraRenderType.Base) hash ^= RenderType.GetHashCode();
      if (RequiresDepthTexture != false) hash ^= RequiresDepthTexture.GetHashCode();
      if (RequiresColorTexture != false) hash ^= RequiresColorTexture.GetHashCode();
      if (VolumeLayerMask != 0) hash ^= VolumeLayerMask.GetHashCode();
      if (volumeTriggerId_ != null) hash ^= VolumeTriggerId.GetHashCode();
      if (RenderPostProcessing != false) hash ^= RenderPostProcessing.GetHashCode();
      if (Antialiasing != global::PLUME.Sample.Unity.AntialiasingMode.None) hash ^= Antialiasing.GetHashCode();
      if (AntialiasingQuality != global::PLUME.Sample.Unity.AntialiasingQuality.Low) hash ^= AntialiasingQuality.GetHashCode();
      if (StopNan != false) hash ^= StopNan.GetHashCode();
      if (Dithering != false) hash ^= Dithering.GetHashCode();
      if (AllowXrRendering != false) hash ^= AllowXrRendering.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Version != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Version);
      }
      if (RenderShadows != false) {
        output.WriteRawTag(24);
        output.WriteBool(RenderShadows);
      }
      if (RequiresDepthOption != global::PLUME.Sample.Unity.URP.CameraOverrideOption.Off) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RequiresDepthOption);
      }
      if (RequiresColorOption != global::PLUME.Sample.Unity.URP.CameraOverrideOption.Off) {
        output.WriteRawTag(40);
        output.WriteEnum((int) RequiresColorOption);
      }
      if (RenderType != global::PLUME.Sample.Unity.URP.CameraRenderType.Base) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RenderType);
      }
      if (RequiresDepthTexture != false) {
        output.WriteRawTag(56);
        output.WriteBool(RequiresDepthTexture);
      }
      if (RequiresColorTexture != false) {
        output.WriteRawTag(64);
        output.WriteBool(RequiresColorTexture);
      }
      if (VolumeLayerMask != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(VolumeLayerMask);
      }
      if (volumeTriggerId_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(VolumeTriggerId);
      }
      if (RenderPostProcessing != false) {
        output.WriteRawTag(88);
        output.WriteBool(RenderPostProcessing);
      }
      if (Antialiasing != global::PLUME.Sample.Unity.AntialiasingMode.None) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Antialiasing);
      }
      if (AntialiasingQuality != global::PLUME.Sample.Unity.AntialiasingQuality.Low) {
        output.WriteRawTag(104);
        output.WriteEnum((int) AntialiasingQuality);
      }
      if (StopNan != false) {
        output.WriteRawTag(112);
        output.WriteBool(StopNan);
      }
      if (Dithering != false) {
        output.WriteRawTag(120);
        output.WriteBool(Dithering);
      }
      if (AllowXrRendering != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(AllowXrRendering);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Version != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Version);
      }
      if (RenderShadows != false) {
        output.WriteRawTag(24);
        output.WriteBool(RenderShadows);
      }
      if (RequiresDepthOption != global::PLUME.Sample.Unity.URP.CameraOverrideOption.Off) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RequiresDepthOption);
      }
      if (RequiresColorOption != global::PLUME.Sample.Unity.URP.CameraOverrideOption.Off) {
        output.WriteRawTag(40);
        output.WriteEnum((int) RequiresColorOption);
      }
      if (RenderType != global::PLUME.Sample.Unity.URP.CameraRenderType.Base) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RenderType);
      }
      if (RequiresDepthTexture != false) {
        output.WriteRawTag(56);
        output.WriteBool(RequiresDepthTexture);
      }
      if (RequiresColorTexture != false) {
        output.WriteRawTag(64);
        output.WriteBool(RequiresColorTexture);
      }
      if (VolumeLayerMask != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(VolumeLayerMask);
      }
      if (volumeTriggerId_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(VolumeTriggerId);
      }
      if (RenderPostProcessing != false) {
        output.WriteRawTag(88);
        output.WriteBool(RenderPostProcessing);
      }
      if (Antialiasing != global::PLUME.Sample.Unity.AntialiasingMode.None) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Antialiasing);
      }
      if (AntialiasingQuality != global::PLUME.Sample.Unity.AntialiasingQuality.Low) {
        output.WriteRawTag(104);
        output.WriteEnum((int) AntialiasingQuality);
      }
      if (StopNan != false) {
        output.WriteRawTag(112);
        output.WriteBool(StopNan);
      }
      if (Dithering != false) {
        output.WriteRawTag(120);
        output.WriteBool(Dithering);
      }
      if (AllowXrRendering != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(AllowXrRendering);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Version != 0F) {
        size += 1 + 4;
      }
      if (RenderShadows != false) {
        size += 1 + 1;
      }
      if (RequiresDepthOption != global::PLUME.Sample.Unity.URP.CameraOverrideOption.Off) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequiresDepthOption);
      }
      if (RequiresColorOption != global::PLUME.Sample.Unity.URP.CameraOverrideOption.Off) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequiresColorOption);
      }
      if (RenderType != global::PLUME.Sample.Unity.URP.CameraRenderType.Base) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RenderType);
      }
      if (RequiresDepthTexture != false) {
        size += 1 + 1;
      }
      if (RequiresColorTexture != false) {
        size += 1 + 1;
      }
      if (VolumeLayerMask != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VolumeLayerMask);
      }
      if (volumeTriggerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VolumeTriggerId);
      }
      if (RenderPostProcessing != false) {
        size += 1 + 1;
      }
      if (Antialiasing != global::PLUME.Sample.Unity.AntialiasingMode.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Antialiasing);
      }
      if (AntialiasingQuality != global::PLUME.Sample.Unity.AntialiasingQuality.Low) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AntialiasingQuality);
      }
      if (StopNan != false) {
        size += 1 + 1;
      }
      if (Dithering != false) {
        size += 1 + 1;
      }
      if (AllowXrRendering != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AdditionalCameraDataUpdate other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Version != 0F) {
        Version = other.Version;
      }
      if (other.RenderShadows != false) {
        RenderShadows = other.RenderShadows;
      }
      if (other.RequiresDepthOption != global::PLUME.Sample.Unity.URP.CameraOverrideOption.Off) {
        RequiresDepthOption = other.RequiresDepthOption;
      }
      if (other.RequiresColorOption != global::PLUME.Sample.Unity.URP.CameraOverrideOption.Off) {
        RequiresColorOption = other.RequiresColorOption;
      }
      if (other.RenderType != global::PLUME.Sample.Unity.URP.CameraRenderType.Base) {
        RenderType = other.RenderType;
      }
      if (other.RequiresDepthTexture != false) {
        RequiresDepthTexture = other.RequiresDepthTexture;
      }
      if (other.RequiresColorTexture != false) {
        RequiresColorTexture = other.RequiresColorTexture;
      }
      if (other.VolumeLayerMask != 0) {
        VolumeLayerMask = other.VolumeLayerMask;
      }
      if (other.volumeTriggerId_ != null) {
        if (volumeTriggerId_ == null) {
          VolumeTriggerId = new global::PLUME.Sample.Unity.TransformGameObjectIdentifier();
        }
        VolumeTriggerId.MergeFrom(other.VolumeTriggerId);
      }
      if (other.RenderPostProcessing != false) {
        RenderPostProcessing = other.RenderPostProcessing;
      }
      if (other.Antialiasing != global::PLUME.Sample.Unity.AntialiasingMode.None) {
        Antialiasing = other.Antialiasing;
      }
      if (other.AntialiasingQuality != global::PLUME.Sample.Unity.AntialiasingQuality.Low) {
        AntialiasingQuality = other.AntialiasingQuality;
      }
      if (other.StopNan != false) {
        StopNan = other.StopNan;
      }
      if (other.Dithering != false) {
        Dithering = other.Dithering;
      }
      if (other.AllowXrRendering != false) {
        AllowXrRendering = other.AllowXrRendering;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
          case 21: {
            Version = input.ReadFloat();
            break;
          }
          case 24: {
            RenderShadows = input.ReadBool();
            break;
          }
          case 32: {
            RequiresDepthOption = (global::PLUME.Sample.Unity.URP.CameraOverrideOption) input.ReadEnum();
            break;
          }
          case 40: {
            RequiresColorOption = (global::PLUME.Sample.Unity.URP.CameraOverrideOption) input.ReadEnum();
            break;
          }
          case 48: {
            RenderType = (global::PLUME.Sample.Unity.URP.CameraRenderType) input.ReadEnum();
            break;
          }
          case 56: {
            RequiresDepthTexture = input.ReadBool();
            break;
          }
          case 64: {
            RequiresColorTexture = input.ReadBool();
            break;
          }
          case 72: {
            VolumeLayerMask = input.ReadInt32();
            break;
          }
          case 82: {
            if (volumeTriggerId_ == null) {
              VolumeTriggerId = new global::PLUME.Sample.Unity.TransformGameObjectIdentifier();
            }
            input.ReadMessage(VolumeTriggerId);
            break;
          }
          case 88: {
            RenderPostProcessing = input.ReadBool();
            break;
          }
          case 96: {
            Antialiasing = (global::PLUME.Sample.Unity.AntialiasingMode) input.ReadEnum();
            break;
          }
          case 104: {
            AntialiasingQuality = (global::PLUME.Sample.Unity.AntialiasingQuality) input.ReadEnum();
            break;
          }
          case 112: {
            StopNan = input.ReadBool();
            break;
          }
          case 120: {
            Dithering = input.ReadBool();
            break;
          }
          case 128: {
            AllowXrRendering = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
          case 21: {
            Version = input.ReadFloat();
            break;
          }
          case 24: {
            RenderShadows = input.ReadBool();
            break;
          }
          case 32: {
            RequiresDepthOption = (global::PLUME.Sample.Unity.URP.CameraOverrideOption) input.ReadEnum();
            break;
          }
          case 40: {
            RequiresColorOption = (global::PLUME.Sample.Unity.URP.CameraOverrideOption) input.ReadEnum();
            break;
          }
          case 48: {
            RenderType = (global::PLUME.Sample.Unity.URP.CameraRenderType) input.ReadEnum();
            break;
          }
          case 56: {
            RequiresDepthTexture = input.ReadBool();
            break;
          }
          case 64: {
            RequiresColorTexture = input.ReadBool();
            break;
          }
          case 72: {
            VolumeLayerMask = input.ReadInt32();
            break;
          }
          case 82: {
            if (volumeTriggerId_ == null) {
              VolumeTriggerId = new global::PLUME.Sample.Unity.TransformGameObjectIdentifier();
            }
            input.ReadMessage(VolumeTriggerId);
            break;
          }
          case 88: {
            RenderPostProcessing = input.ReadBool();
            break;
          }
          case 96: {
            Antialiasing = (global::PLUME.Sample.Unity.AntialiasingMode) input.ReadEnum();
            break;
          }
          case 104: {
            AntialiasingQuality = (global::PLUME.Sample.Unity.AntialiasingQuality) input.ReadEnum();
            break;
          }
          case 112: {
            StopNan = input.ReadBool();
            break;
          }
          case 120: {
            Dithering = input.ReadBool();
            break;
          }
          case 128: {
            AllowXrRendering = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
