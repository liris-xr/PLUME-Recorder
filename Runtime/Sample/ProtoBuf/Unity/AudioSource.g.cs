// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: unity/audio_source.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PLUME.Sample.Unity {

  /// <summary>Holder for reflection information generated from unity/audio_source.proto</summary>
  public static partial class AudioSourceReflection {

    #region Descriptor
    /// <summary>File descriptor for unity/audio_source.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AudioSourceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chh1bml0eS9hdWRpb19zb3VyY2UucHJvdG8SEnBsdW1lLnNhbXBsZS51bml0",
            "eRocY29tbW9uL2FuaW1hdGlvbl9jdXJ2ZS5wcm90bxoXdW5pdHkvaWRlbnRp",
            "ZmllcnMucHJvdG8iSAoRQXVkaW9Tb3VyY2VDcmVhdGUSMwoCaWQYASABKAsy",
            "Jy5wbHVtZS5zYW1wbGUudW5pdHkuQ29tcG9uZW50SWRlbnRpZmllciJJChJB",
            "dWRpb1NvdXJjZURlc3Ryb3kSMwoCaWQYASABKAsyJy5wbHVtZS5zYW1wbGUu",
            "dW5pdHkuQ29tcG9uZW50SWRlbnRpZmllciKUCAoRQXVkaW9Tb3VyY2VVcGRh",
            "dGUSMwoCaWQYASABKAsyJy5wbHVtZS5zYW1wbGUudW5pdHkuQ29tcG9uZW50",
            "SWRlbnRpZmllchI/Cg1hdWRpb19jbGlwX2lkGAIgASgLMiMucGx1bWUuc2Ft",
            "cGxlLnVuaXR5LkFzc2V0SWRlbnRpZmllckgAiAEBEkYKFGF1ZGlvX21peGVy",
            "X2dyb3VwX2lkGAMgASgLMiMucGx1bWUuc2FtcGxlLnVuaXR5LkFzc2V0SWRl",
            "bnRpZmllckgBiAEBEhcKCmlzX3BsYXlpbmcYBCABKAhIAogBARIZCgx0aW1l",
            "X3NhbXBsZXMYBSABKAVIA4gBARIRCgRtdXRlGAYgASgISASIAQESGwoOYnlw",
            "YXNzX2VmZmVjdHMYByABKAhIBYgBARIkChdieXBhc3NfbGlzdGVuZXJfZWZm",
            "ZWN0cxgIIAEoCEgGiAEBEiAKE2J5cGFzc19yZXZlcmJfem9uZXMYCSABKAhI",
            "B4gBARIVCghwcmlvcml0eRgKIAEoBUgIiAEBEhMKBnZvbHVtZRgLIAEoAkgJ",
            "iAEBEhIKBXBpdGNoGAwgASgCSAqIAQESFwoKc3RlcmVvX3BhbhgNIAEoAkgL",
            "iAEBEj8KDXNwYXRpYWxfYmxlbmQYDiABKAsyIy5wbHVtZS5zYW1wbGUuY29t",
            "bW9uLkFuaW1hdGlvbkN1cnZlSAyIAQESQQoPcmV2ZXJiX3pvbmVfbWl4GA8g",
            "ASgLMiMucGx1bWUuc2FtcGxlLmNvbW1vbi5BbmltYXRpb25DdXJ2ZUgNiAEB",
            "EhoKDWRvcHBsZXJfbGV2ZWwYECABKAJIDogBARI4CgZzcHJlYWQYESABKAsy",
            "Iy5wbHVtZS5zYW1wbGUuY29tbW9uLkFuaW1hdGlvbkN1cnZlSA+IAQESQAoO",
            "dm9sdW1lX3JvbGxvZmYYEiABKAsyIy5wbHVtZS5zYW1wbGUuY29tbW9uLkFu",
            "aW1hdGlvbkN1cnZlSBCIAQFCEAoOX2F1ZGlvX2NsaXBfaWRCFwoVX2F1ZGlv",
            "X21peGVyX2dyb3VwX2lkQg0KC19pc19wbGF5aW5nQg8KDV90aW1lX3NhbXBs",
            "ZXNCBwoFX211dGVCEQoPX2J5cGFzc19lZmZlY3RzQhoKGF9ieXBhc3NfbGlz",
            "dGVuZXJfZWZmZWN0c0IWChRfYnlwYXNzX3JldmVyYl96b25lc0ILCglfcHJp",
            "b3JpdHlCCQoHX3ZvbHVtZUIICgZfcGl0Y2hCDQoLX3N0ZXJlb19wYW5CEAoO",
            "X3NwYXRpYWxfYmxlbmRCEgoQX3JldmVyYl96b25lX21peEIQCg5fZG9wcGxl",
            "cl9sZXZlbEIJCgdfc3ByZWFkQhEKD192b2x1bWVfcm9sbG9mZkIVqgISUExV",
            "TUUuU2FtcGxlLlVuaXR5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PLUME.Sample.Common.AnimationCurveReflection.Descriptor, global::PLUME.Sample.Unity.IdentifiersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PLUME.Sample.Unity.AudioSourceCreate), global::PLUME.Sample.Unity.AudioSourceCreate.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PLUME.Sample.Unity.AudioSourceDestroy), global::PLUME.Sample.Unity.AudioSourceDestroy.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PLUME.Sample.Unity.AudioSourceUpdate), global::PLUME.Sample.Unity.AudioSourceUpdate.Parser, new[]{ "Id", "AudioClipId", "AudioMixerGroupId", "IsPlaying", "TimeSamples", "Mute", "BypassEffects", "BypassListenerEffects", "BypassReverbZones", "Priority", "Volume", "Pitch", "StereoPan", "SpatialBlend", "ReverbZoneMix", "DopplerLevel", "Spread", "VolumeRolloff" }, new[]{ "AudioClipId", "AudioMixerGroupId", "IsPlaying", "TimeSamples", "Mute", "BypassEffects", "BypassListenerEffects", "BypassReverbZones", "Priority", "Volume", "Pitch", "StereoPan", "SpatialBlend", "ReverbZoneMix", "DopplerLevel", "Spread", "VolumeRolloff" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AudioSourceCreate : pb::IMessage<AudioSourceCreate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AudioSourceCreate> _parser = new pb::MessageParser<AudioSourceCreate>(() => new AudioSourceCreate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AudioSourceCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLUME.Sample.Unity.AudioSourceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioSourceCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioSourceCreate(AudioSourceCreate other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioSourceCreate Clone() {
      return new AudioSourceCreate(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::PLUME.Sample.Unity.ComponentIdentifier id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.ComponentIdentifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AudioSourceCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AudioSourceCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AudioSourceCreate other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
        }
        Id.MergeFrom(other.Id);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AudioSourceDestroy : pb::IMessage<AudioSourceDestroy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AudioSourceDestroy> _parser = new pb::MessageParser<AudioSourceDestroy>(() => new AudioSourceDestroy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AudioSourceDestroy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLUME.Sample.Unity.AudioSourceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioSourceDestroy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioSourceDestroy(AudioSourceDestroy other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioSourceDestroy Clone() {
      return new AudioSourceDestroy(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::PLUME.Sample.Unity.ComponentIdentifier id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.ComponentIdentifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AudioSourceDestroy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AudioSourceDestroy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AudioSourceDestroy other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
        }
        Id.MergeFrom(other.Id);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AudioSourceUpdate : pb::IMessage<AudioSourceUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AudioSourceUpdate> _parser = new pb::MessageParser<AudioSourceUpdate>(() => new AudioSourceUpdate());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AudioSourceUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLUME.Sample.Unity.AudioSourceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioSourceUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioSourceUpdate(AudioSourceUpdate other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_ != null ? other.id_.Clone() : null;
      audioClipId_ = other.audioClipId_ != null ? other.audioClipId_.Clone() : null;
      audioMixerGroupId_ = other.audioMixerGroupId_ != null ? other.audioMixerGroupId_.Clone() : null;
      isPlaying_ = other.isPlaying_;
      timeSamples_ = other.timeSamples_;
      mute_ = other.mute_;
      bypassEffects_ = other.bypassEffects_;
      bypassListenerEffects_ = other.bypassListenerEffects_;
      bypassReverbZones_ = other.bypassReverbZones_;
      priority_ = other.priority_;
      volume_ = other.volume_;
      pitch_ = other.pitch_;
      stereoPan_ = other.stereoPan_;
      spatialBlend_ = other.spatialBlend_ != null ? other.spatialBlend_.Clone() : null;
      reverbZoneMix_ = other.reverbZoneMix_ != null ? other.reverbZoneMix_.Clone() : null;
      dopplerLevel_ = other.dopplerLevel_;
      spread_ = other.spread_ != null ? other.spread_.Clone() : null;
      volumeRolloff_ = other.volumeRolloff_ != null ? other.volumeRolloff_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AudioSourceUpdate Clone() {
      return new AudioSourceUpdate(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::PLUME.Sample.Unity.ComponentIdentifier id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.ComponentIdentifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "audio_clip_id" field.</summary>
    public const int AudioClipIdFieldNumber = 2;
    private global::PLUME.Sample.Unity.AssetIdentifier audioClipId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.AssetIdentifier AudioClipId {
      get { return audioClipId_; }
      set {
        audioClipId_ = value;
      }
    }

    /// <summary>Field number for the "audio_mixer_group_id" field.</summary>
    public const int AudioMixerGroupIdFieldNumber = 3;
    private global::PLUME.Sample.Unity.AssetIdentifier audioMixerGroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.AssetIdentifier AudioMixerGroupId {
      get { return audioMixerGroupId_; }
      set {
        audioMixerGroupId_ = value;
      }
    }

    /// <summary>Field number for the "is_playing" field.</summary>
    public const int IsPlayingFieldNumber = 4;
    private readonly static bool IsPlayingDefaultValue = false;

    private bool isPlaying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsPlaying {
      get { if ((_hasBits0 & 1) != 0) { return isPlaying_; } else { return IsPlayingDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isPlaying_ = value;
      }
    }
    /// <summary>Gets whether the "is_playing" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsPlaying {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_playing" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsPlaying() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "time_samples" field.</summary>
    public const int TimeSamplesFieldNumber = 5;
    private readonly static int TimeSamplesDefaultValue = 0;

    private int timeSamples_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TimeSamples {
      get { if ((_hasBits0 & 2) != 0) { return timeSamples_; } else { return TimeSamplesDefaultValue; } }
      set {
        _hasBits0 |= 2;
        timeSamples_ = value;
      }
    }
    /// <summary>Gets whether the "time_samples" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimeSamples {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "time_samples" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimeSamples() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "mute" field.</summary>
    public const int MuteFieldNumber = 6;
    private readonly static bool MuteDefaultValue = false;

    private bool mute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Mute {
      get { if ((_hasBits0 & 4) != 0) { return mute_; } else { return MuteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        mute_ = value;
      }
    }
    /// <summary>Gets whether the "mute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMute {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "mute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMute() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "bypass_effects" field.</summary>
    public const int BypassEffectsFieldNumber = 7;
    private readonly static bool BypassEffectsDefaultValue = false;

    private bool bypassEffects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BypassEffects {
      get { if ((_hasBits0 & 8) != 0) { return bypassEffects_; } else { return BypassEffectsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        bypassEffects_ = value;
      }
    }
    /// <summary>Gets whether the "bypass_effects" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBypassEffects {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "bypass_effects" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBypassEffects() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "bypass_listener_effects" field.</summary>
    public const int BypassListenerEffectsFieldNumber = 8;
    private readonly static bool BypassListenerEffectsDefaultValue = false;

    private bool bypassListenerEffects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BypassListenerEffects {
      get { if ((_hasBits0 & 16) != 0) { return bypassListenerEffects_; } else { return BypassListenerEffectsDefaultValue; } }
      set {
        _hasBits0 |= 16;
        bypassListenerEffects_ = value;
      }
    }
    /// <summary>Gets whether the "bypass_listener_effects" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBypassListenerEffects {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "bypass_listener_effects" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBypassListenerEffects() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "bypass_reverb_zones" field.</summary>
    public const int BypassReverbZonesFieldNumber = 9;
    private readonly static bool BypassReverbZonesDefaultValue = false;

    private bool bypassReverbZones_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BypassReverbZones {
      get { if ((_hasBits0 & 32) != 0) { return bypassReverbZones_; } else { return BypassReverbZonesDefaultValue; } }
      set {
        _hasBits0 |= 32;
        bypassReverbZones_ = value;
      }
    }
    /// <summary>Gets whether the "bypass_reverb_zones" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBypassReverbZones {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "bypass_reverb_zones" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBypassReverbZones() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 10;
    private readonly static int PriorityDefaultValue = 0;

    private int priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Priority {
      get { if ((_hasBits0 & 64) != 0) { return priority_; } else { return PriorityDefaultValue; } }
      set {
        _hasBits0 |= 64;
        priority_ = value;
      }
    }
    /// <summary>Gets whether the "priority" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPriority {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "priority" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPriority() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 11;
    private readonly static float VolumeDefaultValue = 0F;

    private float volume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Volume {
      get { if ((_hasBits0 & 128) != 0) { return volume_; } else { return VolumeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        volume_ = value;
      }
    }
    /// <summary>Gets whether the "volume" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVolume {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "volume" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVolume() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 12;
    private readonly static float PitchDefaultValue = 0F;

    private float pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Pitch {
      get { if ((_hasBits0 & 256) != 0) { return pitch_; } else { return PitchDefaultValue; } }
      set {
        _hasBits0 |= 256;
        pitch_ = value;
      }
    }
    /// <summary>Gets whether the "pitch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPitch {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "pitch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPitch() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "stereo_pan" field.</summary>
    public const int StereoPanFieldNumber = 13;
    private readonly static float StereoPanDefaultValue = 0F;

    private float stereoPan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StereoPan {
      get { if ((_hasBits0 & 512) != 0) { return stereoPan_; } else { return StereoPanDefaultValue; } }
      set {
        _hasBits0 |= 512;
        stereoPan_ = value;
      }
    }
    /// <summary>Gets whether the "stereo_pan" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStereoPan {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "stereo_pan" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStereoPan() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "spatial_blend" field.</summary>
    public const int SpatialBlendFieldNumber = 14;
    private global::PLUME.Sample.Common.AnimationCurve spatialBlend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.AnimationCurve SpatialBlend {
      get { return spatialBlend_; }
      set {
        spatialBlend_ = value;
      }
    }

    /// <summary>Field number for the "reverb_zone_mix" field.</summary>
    public const int ReverbZoneMixFieldNumber = 15;
    private global::PLUME.Sample.Common.AnimationCurve reverbZoneMix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.AnimationCurve ReverbZoneMix {
      get { return reverbZoneMix_; }
      set {
        reverbZoneMix_ = value;
      }
    }

    /// <summary>Field number for the "doppler_level" field.</summary>
    public const int DopplerLevelFieldNumber = 16;
    private readonly static float DopplerLevelDefaultValue = 0F;

    private float dopplerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DopplerLevel {
      get { if ((_hasBits0 & 1024) != 0) { return dopplerLevel_; } else { return DopplerLevelDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        dopplerLevel_ = value;
      }
    }
    /// <summary>Gets whether the "doppler_level" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDopplerLevel {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "doppler_level" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDopplerLevel() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "spread" field.</summary>
    public const int SpreadFieldNumber = 17;
    private global::PLUME.Sample.Common.AnimationCurve spread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.AnimationCurve Spread {
      get { return spread_; }
      set {
        spread_ = value;
      }
    }

    /// <summary>Field number for the "volume_rolloff" field.</summary>
    public const int VolumeRolloffFieldNumber = 18;
    private global::PLUME.Sample.Common.AnimationCurve volumeRolloff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.AnimationCurve VolumeRolloff {
      get { return volumeRolloff_; }
      set {
        volumeRolloff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AudioSourceUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AudioSourceUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(AudioClipId, other.AudioClipId)) return false;
      if (!object.Equals(AudioMixerGroupId, other.AudioMixerGroupId)) return false;
      if (IsPlaying != other.IsPlaying) return false;
      if (TimeSamples != other.TimeSamples) return false;
      if (Mute != other.Mute) return false;
      if (BypassEffects != other.BypassEffects) return false;
      if (BypassListenerEffects != other.BypassListenerEffects) return false;
      if (BypassReverbZones != other.BypassReverbZones) return false;
      if (Priority != other.Priority) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volume, other.Volume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StereoPan, other.StereoPan)) return false;
      if (!object.Equals(SpatialBlend, other.SpatialBlend)) return false;
      if (!object.Equals(ReverbZoneMix, other.ReverbZoneMix)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DopplerLevel, other.DopplerLevel)) return false;
      if (!object.Equals(Spread, other.Spread)) return false;
      if (!object.Equals(VolumeRolloff, other.VolumeRolloff)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (audioClipId_ != null) hash ^= AudioClipId.GetHashCode();
      if (audioMixerGroupId_ != null) hash ^= AudioMixerGroupId.GetHashCode();
      if (HasIsPlaying) hash ^= IsPlaying.GetHashCode();
      if (HasTimeSamples) hash ^= TimeSamples.GetHashCode();
      if (HasMute) hash ^= Mute.GetHashCode();
      if (HasBypassEffects) hash ^= BypassEffects.GetHashCode();
      if (HasBypassListenerEffects) hash ^= BypassListenerEffects.GetHashCode();
      if (HasBypassReverbZones) hash ^= BypassReverbZones.GetHashCode();
      if (HasPriority) hash ^= Priority.GetHashCode();
      if (HasVolume) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volume);
      if (HasPitch) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pitch);
      if (HasStereoPan) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StereoPan);
      if (spatialBlend_ != null) hash ^= SpatialBlend.GetHashCode();
      if (reverbZoneMix_ != null) hash ^= ReverbZoneMix.GetHashCode();
      if (HasDopplerLevel) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DopplerLevel);
      if (spread_ != null) hash ^= Spread.GetHashCode();
      if (volumeRolloff_ != null) hash ^= VolumeRolloff.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (audioClipId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AudioClipId);
      }
      if (audioMixerGroupId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AudioMixerGroupId);
      }
      if (HasIsPlaying) {
        output.WriteRawTag(32);
        output.WriteBool(IsPlaying);
      }
      if (HasTimeSamples) {
        output.WriteRawTag(40);
        output.WriteInt32(TimeSamples);
      }
      if (HasMute) {
        output.WriteRawTag(48);
        output.WriteBool(Mute);
      }
      if (HasBypassEffects) {
        output.WriteRawTag(56);
        output.WriteBool(BypassEffects);
      }
      if (HasBypassListenerEffects) {
        output.WriteRawTag(64);
        output.WriteBool(BypassListenerEffects);
      }
      if (HasBypassReverbZones) {
        output.WriteRawTag(72);
        output.WriteBool(BypassReverbZones);
      }
      if (HasPriority) {
        output.WriteRawTag(80);
        output.WriteInt32(Priority);
      }
      if (HasVolume) {
        output.WriteRawTag(93);
        output.WriteFloat(Volume);
      }
      if (HasPitch) {
        output.WriteRawTag(101);
        output.WriteFloat(Pitch);
      }
      if (HasStereoPan) {
        output.WriteRawTag(109);
        output.WriteFloat(StereoPan);
      }
      if (spatialBlend_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(SpatialBlend);
      }
      if (reverbZoneMix_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ReverbZoneMix);
      }
      if (HasDopplerLevel) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(DopplerLevel);
      }
      if (spread_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Spread);
      }
      if (volumeRolloff_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(VolumeRolloff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (audioClipId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AudioClipId);
      }
      if (audioMixerGroupId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AudioMixerGroupId);
      }
      if (HasIsPlaying) {
        output.WriteRawTag(32);
        output.WriteBool(IsPlaying);
      }
      if (HasTimeSamples) {
        output.WriteRawTag(40);
        output.WriteInt32(TimeSamples);
      }
      if (HasMute) {
        output.WriteRawTag(48);
        output.WriteBool(Mute);
      }
      if (HasBypassEffects) {
        output.WriteRawTag(56);
        output.WriteBool(BypassEffects);
      }
      if (HasBypassListenerEffects) {
        output.WriteRawTag(64);
        output.WriteBool(BypassListenerEffects);
      }
      if (HasBypassReverbZones) {
        output.WriteRawTag(72);
        output.WriteBool(BypassReverbZones);
      }
      if (HasPriority) {
        output.WriteRawTag(80);
        output.WriteInt32(Priority);
      }
      if (HasVolume) {
        output.WriteRawTag(93);
        output.WriteFloat(Volume);
      }
      if (HasPitch) {
        output.WriteRawTag(101);
        output.WriteFloat(Pitch);
      }
      if (HasStereoPan) {
        output.WriteRawTag(109);
        output.WriteFloat(StereoPan);
      }
      if (spatialBlend_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(SpatialBlend);
      }
      if (reverbZoneMix_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ReverbZoneMix);
      }
      if (HasDopplerLevel) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(DopplerLevel);
      }
      if (spread_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Spread);
      }
      if (volumeRolloff_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(VolumeRolloff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (audioClipId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AudioClipId);
      }
      if (audioMixerGroupId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AudioMixerGroupId);
      }
      if (HasIsPlaying) {
        size += 1 + 1;
      }
      if (HasTimeSamples) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeSamples);
      }
      if (HasMute) {
        size += 1 + 1;
      }
      if (HasBypassEffects) {
        size += 1 + 1;
      }
      if (HasBypassListenerEffects) {
        size += 1 + 1;
      }
      if (HasBypassReverbZones) {
        size += 1 + 1;
      }
      if (HasPriority) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (HasVolume) {
        size += 1 + 4;
      }
      if (HasPitch) {
        size += 1 + 4;
      }
      if (HasStereoPan) {
        size += 1 + 4;
      }
      if (spatialBlend_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpatialBlend);
      }
      if (reverbZoneMix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReverbZoneMix);
      }
      if (HasDopplerLevel) {
        size += 2 + 4;
      }
      if (spread_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Spread);
      }
      if (volumeRolloff_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VolumeRolloff);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AudioSourceUpdate other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.audioClipId_ != null) {
        if (audioClipId_ == null) {
          AudioClipId = new global::PLUME.Sample.Unity.AssetIdentifier();
        }
        AudioClipId.MergeFrom(other.AudioClipId);
      }
      if (other.audioMixerGroupId_ != null) {
        if (audioMixerGroupId_ == null) {
          AudioMixerGroupId = new global::PLUME.Sample.Unity.AssetIdentifier();
        }
        AudioMixerGroupId.MergeFrom(other.AudioMixerGroupId);
      }
      if (other.HasIsPlaying) {
        IsPlaying = other.IsPlaying;
      }
      if (other.HasTimeSamples) {
        TimeSamples = other.TimeSamples;
      }
      if (other.HasMute) {
        Mute = other.Mute;
      }
      if (other.HasBypassEffects) {
        BypassEffects = other.BypassEffects;
      }
      if (other.HasBypassListenerEffects) {
        BypassListenerEffects = other.BypassListenerEffects;
      }
      if (other.HasBypassReverbZones) {
        BypassReverbZones = other.BypassReverbZones;
      }
      if (other.HasPriority) {
        Priority = other.Priority;
      }
      if (other.HasVolume) {
        Volume = other.Volume;
      }
      if (other.HasPitch) {
        Pitch = other.Pitch;
      }
      if (other.HasStereoPan) {
        StereoPan = other.StereoPan;
      }
      if (other.spatialBlend_ != null) {
        if (spatialBlend_ == null) {
          SpatialBlend = new global::PLUME.Sample.Common.AnimationCurve();
        }
        SpatialBlend.MergeFrom(other.SpatialBlend);
      }
      if (other.reverbZoneMix_ != null) {
        if (reverbZoneMix_ == null) {
          ReverbZoneMix = new global::PLUME.Sample.Common.AnimationCurve();
        }
        ReverbZoneMix.MergeFrom(other.ReverbZoneMix);
      }
      if (other.HasDopplerLevel) {
        DopplerLevel = other.DopplerLevel;
      }
      if (other.spread_ != null) {
        if (spread_ == null) {
          Spread = new global::PLUME.Sample.Common.AnimationCurve();
        }
        Spread.MergeFrom(other.Spread);
      }
      if (other.volumeRolloff_ != null) {
        if (volumeRolloff_ == null) {
          VolumeRolloff = new global::PLUME.Sample.Common.AnimationCurve();
        }
        VolumeRolloff.MergeFrom(other.VolumeRolloff);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (audioClipId_ == null) {
              AudioClipId = new global::PLUME.Sample.Unity.AssetIdentifier();
            }
            input.ReadMessage(AudioClipId);
            break;
          }
          case 26: {
            if (audioMixerGroupId_ == null) {
              AudioMixerGroupId = new global::PLUME.Sample.Unity.AssetIdentifier();
            }
            input.ReadMessage(AudioMixerGroupId);
            break;
          }
          case 32: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 40: {
            TimeSamples = input.ReadInt32();
            break;
          }
          case 48: {
            Mute = input.ReadBool();
            break;
          }
          case 56: {
            BypassEffects = input.ReadBool();
            break;
          }
          case 64: {
            BypassListenerEffects = input.ReadBool();
            break;
          }
          case 72: {
            BypassReverbZones = input.ReadBool();
            break;
          }
          case 80: {
            Priority = input.ReadInt32();
            break;
          }
          case 93: {
            Volume = input.ReadFloat();
            break;
          }
          case 101: {
            Pitch = input.ReadFloat();
            break;
          }
          case 109: {
            StereoPan = input.ReadFloat();
            break;
          }
          case 114: {
            if (spatialBlend_ == null) {
              SpatialBlend = new global::PLUME.Sample.Common.AnimationCurve();
            }
            input.ReadMessage(SpatialBlend);
            break;
          }
          case 122: {
            if (reverbZoneMix_ == null) {
              ReverbZoneMix = new global::PLUME.Sample.Common.AnimationCurve();
            }
            input.ReadMessage(ReverbZoneMix);
            break;
          }
          case 133: {
            DopplerLevel = input.ReadFloat();
            break;
          }
          case 138: {
            if (spread_ == null) {
              Spread = new global::PLUME.Sample.Common.AnimationCurve();
            }
            input.ReadMessage(Spread);
            break;
          }
          case 146: {
            if (volumeRolloff_ == null) {
              VolumeRolloff = new global::PLUME.Sample.Common.AnimationCurve();
            }
            input.ReadMessage(VolumeRolloff);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (audioClipId_ == null) {
              AudioClipId = new global::PLUME.Sample.Unity.AssetIdentifier();
            }
            input.ReadMessage(AudioClipId);
            break;
          }
          case 26: {
            if (audioMixerGroupId_ == null) {
              AudioMixerGroupId = new global::PLUME.Sample.Unity.AssetIdentifier();
            }
            input.ReadMessage(AudioMixerGroupId);
            break;
          }
          case 32: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 40: {
            TimeSamples = input.ReadInt32();
            break;
          }
          case 48: {
            Mute = input.ReadBool();
            break;
          }
          case 56: {
            BypassEffects = input.ReadBool();
            break;
          }
          case 64: {
            BypassListenerEffects = input.ReadBool();
            break;
          }
          case 72: {
            BypassReverbZones = input.ReadBool();
            break;
          }
          case 80: {
            Priority = input.ReadInt32();
            break;
          }
          case 93: {
            Volume = input.ReadFloat();
            break;
          }
          case 101: {
            Pitch = input.ReadFloat();
            break;
          }
          case 109: {
            StereoPan = input.ReadFloat();
            break;
          }
          case 114: {
            if (spatialBlend_ == null) {
              SpatialBlend = new global::PLUME.Sample.Common.AnimationCurve();
            }
            input.ReadMessage(SpatialBlend);
            break;
          }
          case 122: {
            if (reverbZoneMix_ == null) {
              ReverbZoneMix = new global::PLUME.Sample.Common.AnimationCurve();
            }
            input.ReadMessage(ReverbZoneMix);
            break;
          }
          case 133: {
            DopplerLevel = input.ReadFloat();
            break;
          }
          case 138: {
            if (spread_ == null) {
              Spread = new global::PLUME.Sample.Common.AnimationCurve();
            }
            input.ReadMessage(Spread);
            break;
          }
          case 146: {
            if (volumeRolloff_ == null) {
              VolumeRolloff = new global::PLUME.Sample.Common.AnimationCurve();
            }
            input.ReadMessage(VolumeRolloff);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
