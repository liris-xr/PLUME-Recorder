// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lsl/stream_info.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PLUME.Sample.LSL {

  /// <summary>Holder for reflection information generated from lsl/stream_info.proto</summary>
  public static partial class StreamInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for lsl/stream_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StreamInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVsc2wvc3RyZWFtX2luZm8ucHJvdG8SEHBsdW1lLnNhbXBsZS5sc2wiiwEK",
            "ClN0cmVhbUluZm8SGwoTcGx1bWVfcmF3X3RpbWVzdGFtcBgBIAEoBBIYChBs",
            "c2xfcGx1bWVfb2Zmc2V0GAIgASgDEhUKDWxzbF90aW1lc3RhbXAYAyABKAES",
            "GAoQbHNsX2Nsb2NrX29mZnNldBgEIAEoARIVCg1sc2xfc3RyZWFtX2lkGAUg",
            "ASgJQhOqAhBQTFVNRS5TYW1wbGUuTFNMYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PLUME.Sample.LSL.StreamInfo), global::PLUME.Sample.LSL.StreamInfo.Parser, new[]{ "PlumeRawTimestamp", "LslPlumeOffset", "LslTimestamp", "LslClockOffset", "LslStreamId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class StreamInfo : pb::IMessage<StreamInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StreamInfo> _parser = new pb::MessageParser<StreamInfo>(() => new StreamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StreamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLUME.Sample.LSL.StreamInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StreamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StreamInfo(StreamInfo other) : this() {
      plumeRawTimestamp_ = other.plumeRawTimestamp_;
      lslPlumeOffset_ = other.lslPlumeOffset_;
      lslTimestamp_ = other.lslTimestamp_;
      lslClockOffset_ = other.lslClockOffset_;
      lslStreamId_ = other.lslStreamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StreamInfo Clone() {
      return new StreamInfo(this);
    }

    /// <summary>Field number for the "plume_raw_timestamp" field.</summary>
    public const int PlumeRawTimestampFieldNumber = 1;
    private ulong plumeRawTimestamp_;
    /// <summary>
    /// PLUME timestamp when the sample was received by the stream inlet. This is required
    /// in case one need the original reception timestamp of the sample, as the sample timestamp
    /// is modified to take the LSL time offset into account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong PlumeRawTimestamp {
      get { return plumeRawTimestamp_; }
      set {
        plumeRawTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "lsl_plume_offset" field.</summary>
    public const int LslPlumeOffsetFieldNumber = 2;
    private long lslPlumeOffset_;
    /// <summary>
    /// Local offset between the PLUME recorder clock and LSL clock, in nanoseconds
    /// Add the PLUME timestamp to this offset to get the timestamp in the LSL frame of reference
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LslPlumeOffset {
      get { return lslPlumeOffset_; }
      set {
        lslPlumeOffset_ = value;
      }
    }

    /// <summary>Field number for the "lsl_timestamp" field.</summary>
    public const int LslTimestampFieldNumber = 3;
    private double lslTimestamp_;
    /// <summary>
    /// Timestamp of the sample provided by the machine emitting the samples.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LslTimestamp {
      get { return lslTimestamp_; }
      set {
        lslTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "lsl_clock_offset" field.</summary>
    public const int LslClockOffsetFieldNumber = 4;
    private double lslClockOffset_;
    /// <summary>
    /// Estimated time correction between the local LSL clock (inlet) and the sample emitter (outlet)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LslClockOffset {
      get { return lslClockOffset_; }
      set {
        lslClockOffset_ = value;
      }
    }

    /// <summary>Field number for the "lsl_stream_id" field.</summary>
    public const int LslStreamIdFieldNumber = 5;
    private string lslStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LslStreamId {
      get { return lslStreamId_; }
      set {
        lslStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StreamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StreamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlumeRawTimestamp != other.PlumeRawTimestamp) return false;
      if (LslPlumeOffset != other.LslPlumeOffset) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LslTimestamp, other.LslTimestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LslClockOffset, other.LslClockOffset)) return false;
      if (LslStreamId != other.LslStreamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PlumeRawTimestamp != 0UL) hash ^= PlumeRawTimestamp.GetHashCode();
      if (LslPlumeOffset != 0L) hash ^= LslPlumeOffset.GetHashCode();
      if (LslTimestamp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LslTimestamp);
      if (LslClockOffset != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LslClockOffset);
      if (LslStreamId.Length != 0) hash ^= LslStreamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlumeRawTimestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlumeRawTimestamp);
      }
      if (LslPlumeOffset != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LslPlumeOffset);
      }
      if (LslTimestamp != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LslTimestamp);
      }
      if (LslClockOffset != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LslClockOffset);
      }
      if (LslStreamId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LslStreamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlumeRawTimestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlumeRawTimestamp);
      }
      if (LslPlumeOffset != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LslPlumeOffset);
      }
      if (LslTimestamp != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(LslTimestamp);
      }
      if (LslClockOffset != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LslClockOffset);
      }
      if (LslStreamId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LslStreamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PlumeRawTimestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlumeRawTimestamp);
      }
      if (LslPlumeOffset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LslPlumeOffset);
      }
      if (LslTimestamp != 0D) {
        size += 1 + 8;
      }
      if (LslClockOffset != 0D) {
        size += 1 + 8;
      }
      if (LslStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LslStreamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StreamInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlumeRawTimestamp != 0UL) {
        PlumeRawTimestamp = other.PlumeRawTimestamp;
      }
      if (other.LslPlumeOffset != 0L) {
        LslPlumeOffset = other.LslPlumeOffset;
      }
      if (other.LslTimestamp != 0D) {
        LslTimestamp = other.LslTimestamp;
      }
      if (other.LslClockOffset != 0D) {
        LslClockOffset = other.LslClockOffset;
      }
      if (other.LslStreamId.Length != 0) {
        LslStreamId = other.LslStreamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlumeRawTimestamp = input.ReadUInt64();
            break;
          }
          case 16: {
            LslPlumeOffset = input.ReadInt64();
            break;
          }
          case 25: {
            LslTimestamp = input.ReadDouble();
            break;
          }
          case 33: {
            LslClockOffset = input.ReadDouble();
            break;
          }
          case 42: {
            LslStreamId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlumeRawTimestamp = input.ReadUInt64();
            break;
          }
          case 16: {
            LslPlumeOffset = input.ReadInt64();
            break;
          }
          case 25: {
            LslTimestamp = input.ReadDouble();
            break;
          }
          case 33: {
            LslClockOffset = input.ReadDouble();
            break;
          }
          case 42: {
            LslStreamId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
