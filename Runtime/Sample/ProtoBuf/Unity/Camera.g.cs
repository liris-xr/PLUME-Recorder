// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: unity/camera.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PLUME.Sample.Unity {

  /// <summary>Holder for reflection information generated from unity/camera.proto</summary>
  public static partial class CameraReflection {

    #region Descriptor
    /// <summary>File descriptor for unity/camera.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CameraReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJ1bml0eS9jYW1lcmEucHJvdG8SEnBsdW1lLnNhbXBsZS51bml0eRoXdW5p",
            "dHkvaWRlbnRpZmllcnMucHJvdG8aFXVuaXR5L3JlbmRlcmluZy5wcm90bxoU",
            "Y29tbW9uL3ZlY3RvcjIucHJvdG8aFGNvbW1vbi92ZWN0b3IzLnByb3RvGhZj",
            "b21tb24vbWF0cml4NHg0LnByb3RvGhJjb21tb24vY29sb3IucHJvdG8aEWNv",
            "bW1vbi9yZWN0LnByb3RvIkMKDENhbWVyYUNyZWF0ZRIzCgJpZBgBIAEoCzIn",
            "LnBsdW1lLnNhbXBsZS51bml0eS5Db21wb25lbnRJZGVudGlmaWVyIkQKDUNh",
            "bWVyYURlc3Ryb3kSMwoCaWQYASABKAsyJy5wbHVtZS5zYW1wbGUudW5pdHku",
            "Q29tcG9uZW50SWRlbnRpZmllciLBFgoMQ2FtZXJhVXBkYXRlEjMKAmlkGAEg",
            "ASgLMicucGx1bWUuc2FtcGxlLnVuaXR5LkNvbXBvbmVudElkZW50aWZpZXIS",
            "HAoPbmVhcl9jbGlwX3BsYW5lGAIgASgCSACIAQESGwoOZmFyX2NsaXBfcGxh",
            "bmUYAyABKAJIAYgBARIaCg1maWVsZF9vZl92aWV3GAQgASgCSAKIAQESPgoO",
            "cmVuZGVyaW5nX3BhdGgYBSABKA4yIS5wbHVtZS5zYW1wbGUudW5pdHkuUmVu",
            "ZGVyaW5nUGF0aEgDiAEBEhYKCWFsbG93X2hkchgGIAEoCEgEiAEBEhcKCmFs",
            "bG93X21zYWEYByABKAhIBYgBARIlChhhbGxvd19keW5hbWljX3Jlc29sdXRp",
            "b24YCCABKAhIBogBARImChlmb3JjZV9pbnRvX3JlbmRlcl90ZXh0dXJlGAkg",
            "ASgISAeIAQESHgoRb3J0aG9ncmFwaGljX3NpemUYCiABKAJICIgBARIZCgxv",
            "cnRob2dyYXBoaWMYCyABKAhICYgBARJBChBvcGFxdWVfc29ydF9tb2RlGAwg",
            "ASgOMiIucGx1bWUuc2FtcGxlLnVuaXR5Lk9wYXF1ZVNvcnRNb2RlSAqIAQES",
            "TQoWdHJhbnNwYXJlbmN5X3NvcnRfbW9kZRgNIAEoDjIoLnBsdW1lLnNhbXBs",
            "ZS51bml0eS5UcmFuc3BhcmVuY3lTb3J0TW9kZUgLiAEBEkEKFnRyYW5zcGFy",
            "ZW5jeV9zb3J0X2F4aXMYDiABKAsyHC5wbHVtZS5zYW1wbGUuY29tbW9uLlZl",
            "Y3RvcjNIDIgBARISCgVkZXB0aBgPIAEoAkgNiAEBEhMKBmFzcGVjdBgQIAEo",
            "AkgOiAEBEhkKDGN1bGxpbmdfbWFzaxgRIAEoBUgPiAEBEhcKCmV2ZW50X21h",
            "c2sYEiABKAVIEIgBARIhChRsYXllcl9jdWxsX3NwaGVyaWNhbBgTIAEoCEgR",
            "iAEBEhgKC2NhbWVyYV90eXBlGBQgASgNSBKIAQESTwoUbGF5ZXJfY3VsbF9k",
            "aXN0YW5jZXMYFSABKAsyLC5wbHVtZS5zYW1wbGUudW5pdHkuQ2FtZXJhTGF5",
            "ZXJDdWxsRGlzdGFuY2VzSBOIAQESIgoVdXNlX29jY2x1c2lvbl9jdWxsaW5n",
            "GBYgASgISBSIAQESOwoOY3VsbGluZ19tYXRyaXgYFyABKAsyHi5wbHVtZS5z",
            "YW1wbGUuY29tbW9uLk1hdHJpeDR4NEgViAEBEjkKEGJhY2tncm91bmRfY29s",
            "b3IYGCABKAsyGi5wbHVtZS5zYW1wbGUuY29tbW9uLkNvbG9ySBaIAQESGAoL",
            "Y2xlYXJfZmxhZ3MYGSABKA1IF4gBARIfChJkZXB0aF90ZXh0dXJlX21vZGUY",
            "GiABKA1IGIgBARIuCiFjbGVhcl9zdGVuY2lsX2FmdGVyX2xpZ2h0aW5nX3Bh",
            "c3MYGyABKAhIGYgBARIkChd1c2VfcGh5c2ljYWxfcHJvcGVydGllcxgcIAEo",
            "CEgaiAEBEjYKC3NlbnNvcl9zaXplGB0gASgLMhwucGx1bWUuc2FtcGxlLmNv",
            "bW1vbi5WZWN0b3IySBuIAQESNQoKbGVuc19zaGlmdBgeIAEoCzIcLnBsdW1l",
            "LnNhbXBsZS5jb21tb24uVmVjdG9yMkgciAEBEhkKDGZvY2FsX2xlbmd0aBgf",
            "IAEoAkgdiAEBEjwKCGdhdGVfZml0GCAgASgOMiUucGx1bWUuc2FtcGxlLnVu",
            "aXR5LkNhbWVyYUdhdGVGaXRNb2RlSB6IAQESLAoEcmVjdBghIAEoCzIZLnBs",
            "dW1lLnNhbXBsZS5jb21tb24uUmVjdEgfiAEBEjIKCnBpeGVsX3JlY3QYIiAB",
            "KAsyGS5wbHVtZS5zYW1wbGUuY29tbW9uLlJlY3RIIIgBARJDChF0YXJnZXRf",
            "dGV4dHVyZV9pZBgjIAEoCzIjLnBsdW1lLnNhbXBsZS51bml0eS5Bc3NldElk",
            "ZW50aWZpZXJIIYgBARIbCg50YXJnZXRfZGlzcGxheRgkIAEoBUgiiAEBEkMK",
            "FndvcmxkX3RvX2NhbWVyYV9tYXRyaXgYJSABKAsyHi5wbHVtZS5zYW1wbGUu",
            "Y29tbW9uLk1hdHJpeDR4NEgjiAEBEj4KEXByb2plY3Rpb25fbWF0cml4GCYg",
            "ASgLMh4ucGx1bWUuc2FtcGxlLmNvbW1vbi5NYXRyaXg0eDRIJIgBARJLCh5u",
            "b25faml0dGVyZWRfcHJvamVjdGlvbl9tYXRyaXgYJyABKAsyHi5wbHVtZS5z",
            "YW1wbGUuY29tbW9uLk1hdHJpeDR4NEgliAEBEkUKOHVzZV9qaXR0ZXJlZF9w",
            "cm9qZWN0aW9uX21hdHJpeF9mb3JfdHJhbnNwYXJlbnRfcmVuZGVyaW5nGCgg",
            "ASgISCaIAQESHgoRc3RlcmVvX3NlcGFyYXRpb24YKSABKAJIJ4gBARIfChJz",
            "dGVyZW9fY29udmVyZ2VuY2UYKiABKAJIKIgBARJNChFzdGVyZW9fdGFyZ2V0",
            "X2V5ZRgrIAEoDjItLnBsdW1lLnNhbXBsZS51bml0eS5DYW1lcmFTdGVyZW9U",
            "YXJnZXRFeWVNYXNrSCmIAQFCEgoQX25lYXJfY2xpcF9wbGFuZUIRCg9fZmFy",
            "X2NsaXBfcGxhbmVCEAoOX2ZpZWxkX29mX3ZpZXdCEQoPX3JlbmRlcmluZ19w",
            "YXRoQgwKCl9hbGxvd19oZHJCDQoLX2FsbG93X21zYWFCGwoZX2FsbG93X2R5",
            "bmFtaWNfcmVzb2x1dGlvbkIcChpfZm9yY2VfaW50b19yZW5kZXJfdGV4dHVy",
            "ZUIUChJfb3J0aG9ncmFwaGljX3NpemVCDwoNX29ydGhvZ3JhcGhpY0ITChFf",
            "b3BhcXVlX3NvcnRfbW9kZUIZChdfdHJhbnNwYXJlbmN5X3NvcnRfbW9kZUIZ",
            "ChdfdHJhbnNwYXJlbmN5X3NvcnRfYXhpc0IICgZfZGVwdGhCCQoHX2FzcGVj",
            "dEIPCg1fY3VsbGluZ19tYXNrQg0KC19ldmVudF9tYXNrQhcKFV9sYXllcl9j",
            "dWxsX3NwaGVyaWNhbEIOCgxfY2FtZXJhX3R5cGVCFwoVX2xheWVyX2N1bGxf",
            "ZGlzdGFuY2VzQhgKFl91c2Vfb2NjbHVzaW9uX2N1bGxpbmdCEQoPX2N1bGxp",
            "bmdfbWF0cml4QhMKEV9iYWNrZ3JvdW5kX2NvbG9yQg4KDF9jbGVhcl9mbGFn",
            "c0IVChNfZGVwdGhfdGV4dHVyZV9tb2RlQiQKIl9jbGVhcl9zdGVuY2lsX2Fm",
            "dGVyX2xpZ2h0aW5nX3Bhc3NCGgoYX3VzZV9waHlzaWNhbF9wcm9wZXJ0aWVz",
            "Qg4KDF9zZW5zb3Jfc2l6ZUINCgtfbGVuc19zaGlmdEIPCg1fZm9jYWxfbGVu",
            "Z3RoQgsKCV9nYXRlX2ZpdEIHCgVfcmVjdEINCgtfcGl4ZWxfcmVjdEIUChJf",
            "dGFyZ2V0X3RleHR1cmVfaWRCEQoPX3RhcmdldF9kaXNwbGF5QhkKF193b3Js",
            "ZF90b19jYW1lcmFfbWF0cml4QhQKEl9wcm9qZWN0aW9uX21hdHJpeEIhCh9f",
            "bm9uX2ppdHRlcmVkX3Byb2plY3Rpb25fbWF0cml4QjsKOV91c2Vfaml0dGVy",
            "ZWRfcHJvamVjdGlvbl9tYXRyaXhfZm9yX3RyYW5zcGFyZW50X3JlbmRlcmlu",
            "Z0IUChJfc3RlcmVvX3NlcGFyYXRpb25CFQoTX3N0ZXJlb19jb252ZXJnZW5j",
            "ZUIUChJfc3RlcmVvX3RhcmdldF9leWUiLQoYQ2FtZXJhTGF5ZXJDdWxsRGlz",
            "dGFuY2VzEhEKCWRpc3RhbmNlcxgBIAMoAiq8AQoRQ2FtZXJhR2F0ZUZpdE1v",
            "ZGUSHQoZQ0FNRVJBX0dBVEVfRklUX01PREVfTk9ORRAAEiEKHUNBTUVSQV9H",
            "QVRFX0ZJVF9NT0RFX1ZFUlRJQ0FMEAESIwofQ0FNRVJBX0dBVEVfRklUX01P",
            "REVfSE9SSVpPTlRBTBACEh0KGUNBTUVSQV9HQVRFX0ZJVF9NT0RFX0ZJTEwQ",
            "AxIhCh1DQU1FUkFfR0FURV9GSVRfTU9ERV9PVkVSU0NBThAEKrwBChlDYW1l",
            "cmFTdGVyZW9UYXJnZXRFeWVNYXNrEiYKIkNBTUVSQV9TVEVSRU9fVEFSR0VU",
            "X0VZRV9NQVNLX05PTkUQABImCiJDQU1FUkFfU1RFUkVPX1RBUkdFVF9FWUVf",
            "TUFTS19MRUZUEAESJwojQ0FNRVJBX1NURVJFT19UQVJHRVRfRVlFX01BU0tf",
            "UklHSFQQAhImCiJDQU1FUkFfU1RFUkVPX1RBUkdFVF9FWUVfTUFTS19CT1RI",
            "EANCFaoCElBMVU1FLlNhbXBsZS5Vbml0eWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PLUME.Sample.Unity.IdentifiersReflection.Descriptor, global::PLUME.Sample.Unity.RenderingReflection.Descriptor, global::PLUME.Sample.Common.Vector2Reflection.Descriptor, global::PLUME.Sample.Common.Vector3Reflection.Descriptor, global::PLUME.Sample.Common.Matrix4X4Reflection.Descriptor, global::PLUME.Sample.Common.ColorReflection.Descriptor, global::PLUME.Sample.Common.RectReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PLUME.Sample.Unity.CameraGateFitMode), typeof(global::PLUME.Sample.Unity.CameraStereoTargetEyeMask), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PLUME.Sample.Unity.CameraCreate), global::PLUME.Sample.Unity.CameraCreate.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PLUME.Sample.Unity.CameraDestroy), global::PLUME.Sample.Unity.CameraDestroy.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PLUME.Sample.Unity.CameraUpdate), global::PLUME.Sample.Unity.CameraUpdate.Parser, new[]{ "Id", "NearClipPlane", "FarClipPlane", "FieldOfView", "RenderingPath", "AllowHdr", "AllowMsaa", "AllowDynamicResolution", "ForceIntoRenderTexture", "OrthographicSize", "Orthographic", "OpaqueSortMode", "TransparencySortMode", "TransparencySortAxis", "Depth", "Aspect", "CullingMask", "EventMask", "LayerCullSpherical", "CameraType", "LayerCullDistances", "UseOcclusionCulling", "CullingMatrix", "BackgroundColor", "ClearFlags", "DepthTextureMode", "ClearStencilAfterLightingPass", "UsePhysicalProperties", "SensorSize", "LensShift", "FocalLength", "GateFit", "Rect", "PixelRect", "TargetTextureId", "TargetDisplay", "WorldToCameraMatrix", "ProjectionMatrix", "NonJitteredProjectionMatrix", "UseJitteredProjectionMatrixForTransparentRendering", "StereoSeparation", "StereoConvergence", "StereoTargetEye" }, new[]{ "NearClipPlane", "FarClipPlane", "FieldOfView", "RenderingPath", "AllowHdr", "AllowMsaa", "AllowDynamicResolution", "ForceIntoRenderTexture", "OrthographicSize", "Orthographic", "OpaqueSortMode", "TransparencySortMode", "TransparencySortAxis", "Depth", "Aspect", "CullingMask", "EventMask", "LayerCullSpherical", "CameraType", "LayerCullDistances", "UseOcclusionCulling", "CullingMatrix", "BackgroundColor", "ClearFlags", "DepthTextureMode", "ClearStencilAfterLightingPass", "UsePhysicalProperties", "SensorSize", "LensShift", "FocalLength", "GateFit", "Rect", "PixelRect", "TargetTextureId", "TargetDisplay", "WorldToCameraMatrix", "ProjectionMatrix", "NonJitteredProjectionMatrix", "UseJitteredProjectionMatrixForTransparentRendering", "StereoSeparation", "StereoConvergence", "StereoTargetEye" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PLUME.Sample.Unity.CameraLayerCullDistances), global::PLUME.Sample.Unity.CameraLayerCullDistances.Parser, new[]{ "Distances" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CameraGateFitMode {
    [pbr::OriginalName("CAMERA_GATE_FIT_MODE_NONE")] None = 0,
    [pbr::OriginalName("CAMERA_GATE_FIT_MODE_VERTICAL")] Vertical = 1,
    [pbr::OriginalName("CAMERA_GATE_FIT_MODE_HORIZONTAL")] Horizontal = 2,
    [pbr::OriginalName("CAMERA_GATE_FIT_MODE_FILL")] Fill = 3,
    [pbr::OriginalName("CAMERA_GATE_FIT_MODE_OVERSCAN")] Overscan = 4,
  }

  public enum CameraStereoTargetEyeMask {
    [pbr::OriginalName("CAMERA_STEREO_TARGET_EYE_MASK_NONE")] None = 0,
    [pbr::OriginalName("CAMERA_STEREO_TARGET_EYE_MASK_LEFT")] Left = 1,
    [pbr::OriginalName("CAMERA_STEREO_TARGET_EYE_MASK_RIGHT")] Right = 2,
    [pbr::OriginalName("CAMERA_STEREO_TARGET_EYE_MASK_BOTH")] Both = 3,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CameraCreate : pb::IMessage<CameraCreate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CameraCreate> _parser = new pb::MessageParser<CameraCreate>(() => new CameraCreate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CameraCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLUME.Sample.Unity.CameraReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraCreate(CameraCreate other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraCreate Clone() {
      return new CameraCreate(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::PLUME.Sample.Unity.ComponentIdentifier id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.ComponentIdentifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CameraCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CameraCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CameraCreate other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
        }
        Id.MergeFrom(other.Id);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CameraDestroy : pb::IMessage<CameraDestroy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CameraDestroy> _parser = new pb::MessageParser<CameraDestroy>(() => new CameraDestroy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CameraDestroy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLUME.Sample.Unity.CameraReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraDestroy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraDestroy(CameraDestroy other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraDestroy Clone() {
      return new CameraDestroy(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::PLUME.Sample.Unity.ComponentIdentifier id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.ComponentIdentifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CameraDestroy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CameraDestroy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CameraDestroy other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
        }
        Id.MergeFrom(other.Id);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CameraUpdate : pb::IMessage<CameraUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CameraUpdate> _parser = new pb::MessageParser<CameraUpdate>(() => new CameraUpdate());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CameraUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLUME.Sample.Unity.CameraReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraUpdate(CameraUpdate other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_ != null ? other.id_.Clone() : null;
      nearClipPlane_ = other.nearClipPlane_;
      farClipPlane_ = other.farClipPlane_;
      fieldOfView_ = other.fieldOfView_;
      renderingPath_ = other.renderingPath_;
      allowHdr_ = other.allowHdr_;
      allowMsaa_ = other.allowMsaa_;
      allowDynamicResolution_ = other.allowDynamicResolution_;
      forceIntoRenderTexture_ = other.forceIntoRenderTexture_;
      orthographicSize_ = other.orthographicSize_;
      orthographic_ = other.orthographic_;
      opaqueSortMode_ = other.opaqueSortMode_;
      transparencySortMode_ = other.transparencySortMode_;
      transparencySortAxis_ = other.transparencySortAxis_ != null ? other.transparencySortAxis_.Clone() : null;
      depth_ = other.depth_;
      aspect_ = other.aspect_;
      cullingMask_ = other.cullingMask_;
      eventMask_ = other.eventMask_;
      layerCullSpherical_ = other.layerCullSpherical_;
      cameraType_ = other.cameraType_;
      layerCullDistances_ = other.layerCullDistances_ != null ? other.layerCullDistances_.Clone() : null;
      useOcclusionCulling_ = other.useOcclusionCulling_;
      cullingMatrix_ = other.cullingMatrix_ != null ? other.cullingMatrix_.Clone() : null;
      backgroundColor_ = other.backgroundColor_ != null ? other.backgroundColor_.Clone() : null;
      clearFlags_ = other.clearFlags_;
      depthTextureMode_ = other.depthTextureMode_;
      clearStencilAfterLightingPass_ = other.clearStencilAfterLightingPass_;
      usePhysicalProperties_ = other.usePhysicalProperties_;
      sensorSize_ = other.sensorSize_ != null ? other.sensorSize_.Clone() : null;
      lensShift_ = other.lensShift_ != null ? other.lensShift_.Clone() : null;
      focalLength_ = other.focalLength_;
      gateFit_ = other.gateFit_;
      rect_ = other.rect_ != null ? other.rect_.Clone() : null;
      pixelRect_ = other.pixelRect_ != null ? other.pixelRect_.Clone() : null;
      targetTextureId_ = other.targetTextureId_ != null ? other.targetTextureId_.Clone() : null;
      targetDisplay_ = other.targetDisplay_;
      worldToCameraMatrix_ = other.worldToCameraMatrix_ != null ? other.worldToCameraMatrix_.Clone() : null;
      projectionMatrix_ = other.projectionMatrix_ != null ? other.projectionMatrix_.Clone() : null;
      nonJitteredProjectionMatrix_ = other.nonJitteredProjectionMatrix_ != null ? other.nonJitteredProjectionMatrix_.Clone() : null;
      useJitteredProjectionMatrixForTransparentRendering_ = other.useJitteredProjectionMatrixForTransparentRendering_;
      stereoSeparation_ = other.stereoSeparation_;
      stereoConvergence_ = other.stereoConvergence_;
      stereoTargetEye_ = other.stereoTargetEye_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraUpdate Clone() {
      return new CameraUpdate(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::PLUME.Sample.Unity.ComponentIdentifier id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.ComponentIdentifier Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "near_clip_plane" field.</summary>
    public const int NearClipPlaneFieldNumber = 2;
    private readonly static float NearClipPlaneDefaultValue = 0F;

    private float nearClipPlane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NearClipPlane {
      get { if ((_hasBits0 & 1) != 0) { return nearClipPlane_; } else { return NearClipPlaneDefaultValue; } }
      set {
        _hasBits0 |= 1;
        nearClipPlane_ = value;
      }
    }
    /// <summary>Gets whether the "near_clip_plane" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNearClipPlane {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "near_clip_plane" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNearClipPlane() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "far_clip_plane" field.</summary>
    public const int FarClipPlaneFieldNumber = 3;
    private readonly static float FarClipPlaneDefaultValue = 0F;

    private float farClipPlane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FarClipPlane {
      get { if ((_hasBits0 & 2) != 0) { return farClipPlane_; } else { return FarClipPlaneDefaultValue; } }
      set {
        _hasBits0 |= 2;
        farClipPlane_ = value;
      }
    }
    /// <summary>Gets whether the "far_clip_plane" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFarClipPlane {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "far_clip_plane" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFarClipPlane() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "field_of_view" field.</summary>
    public const int FieldOfViewFieldNumber = 4;
    private readonly static float FieldOfViewDefaultValue = 0F;

    private float fieldOfView_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FieldOfView {
      get { if ((_hasBits0 & 4) != 0) { return fieldOfView_; } else { return FieldOfViewDefaultValue; } }
      set {
        _hasBits0 |= 4;
        fieldOfView_ = value;
      }
    }
    /// <summary>Gets whether the "field_of_view" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFieldOfView {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "field_of_view" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFieldOfView() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "rendering_path" field.</summary>
    public const int RenderingPathFieldNumber = 5;
    private readonly static global::PLUME.Sample.Unity.RenderingPath RenderingPathDefaultValue = global::PLUME.Sample.Unity.RenderingPath.UsePlayerSettings;

    private global::PLUME.Sample.Unity.RenderingPath renderingPath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.RenderingPath RenderingPath {
      get { if ((_hasBits0 & 8) != 0) { return renderingPath_; } else { return RenderingPathDefaultValue; } }
      set {
        _hasBits0 |= 8;
        renderingPath_ = value;
      }
    }
    /// <summary>Gets whether the "rendering_path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRenderingPath {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "rendering_path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRenderingPath() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "allow_hdr" field.</summary>
    public const int AllowHdrFieldNumber = 6;
    private readonly static bool AllowHdrDefaultValue = false;

    private bool allowHdr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowHdr {
      get { if ((_hasBits0 & 16) != 0) { return allowHdr_; } else { return AllowHdrDefaultValue; } }
      set {
        _hasBits0 |= 16;
        allowHdr_ = value;
      }
    }
    /// <summary>Gets whether the "allow_hdr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllowHdr {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "allow_hdr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllowHdr() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "allow_msaa" field.</summary>
    public const int AllowMsaaFieldNumber = 7;
    private readonly static bool AllowMsaaDefaultValue = false;

    private bool allowMsaa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowMsaa {
      get { if ((_hasBits0 & 32) != 0) { return allowMsaa_; } else { return AllowMsaaDefaultValue; } }
      set {
        _hasBits0 |= 32;
        allowMsaa_ = value;
      }
    }
    /// <summary>Gets whether the "allow_msaa" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllowMsaa {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "allow_msaa" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllowMsaa() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "allow_dynamic_resolution" field.</summary>
    public const int AllowDynamicResolutionFieldNumber = 8;
    private readonly static bool AllowDynamicResolutionDefaultValue = false;

    private bool allowDynamicResolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowDynamicResolution {
      get { if ((_hasBits0 & 64) != 0) { return allowDynamicResolution_; } else { return AllowDynamicResolutionDefaultValue; } }
      set {
        _hasBits0 |= 64;
        allowDynamicResolution_ = value;
      }
    }
    /// <summary>Gets whether the "allow_dynamic_resolution" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllowDynamicResolution {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "allow_dynamic_resolution" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllowDynamicResolution() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "force_into_render_texture" field.</summary>
    public const int ForceIntoRenderTextureFieldNumber = 9;
    private readonly static bool ForceIntoRenderTextureDefaultValue = false;

    private bool forceIntoRenderTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ForceIntoRenderTexture {
      get { if ((_hasBits0 & 128) != 0) { return forceIntoRenderTexture_; } else { return ForceIntoRenderTextureDefaultValue; } }
      set {
        _hasBits0 |= 128;
        forceIntoRenderTexture_ = value;
      }
    }
    /// <summary>Gets whether the "force_into_render_texture" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasForceIntoRenderTexture {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "force_into_render_texture" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearForceIntoRenderTexture() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "orthographic_size" field.</summary>
    public const int OrthographicSizeFieldNumber = 10;
    private readonly static float OrthographicSizeDefaultValue = 0F;

    private float orthographicSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrthographicSize {
      get { if ((_hasBits0 & 256) != 0) { return orthographicSize_; } else { return OrthographicSizeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        orthographicSize_ = value;
      }
    }
    /// <summary>Gets whether the "orthographic_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrthographicSize {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "orthographic_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrthographicSize() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "orthographic" field.</summary>
    public const int OrthographicFieldNumber = 11;
    private readonly static bool OrthographicDefaultValue = false;

    private bool orthographic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Orthographic {
      get { if ((_hasBits0 & 512) != 0) { return orthographic_; } else { return OrthographicDefaultValue; } }
      set {
        _hasBits0 |= 512;
        orthographic_ = value;
      }
    }
    /// <summary>Gets whether the "orthographic" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrthographic {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "orthographic" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrthographic() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "opaque_sort_mode" field.</summary>
    public const int OpaqueSortModeFieldNumber = 12;
    private readonly static global::PLUME.Sample.Unity.OpaqueSortMode OpaqueSortModeDefaultValue = global::PLUME.Sample.Unity.OpaqueSortMode.Default;

    private global::PLUME.Sample.Unity.OpaqueSortMode opaqueSortMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.OpaqueSortMode OpaqueSortMode {
      get { if ((_hasBits0 & 1024) != 0) { return opaqueSortMode_; } else { return OpaqueSortModeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        opaqueSortMode_ = value;
      }
    }
    /// <summary>Gets whether the "opaque_sort_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOpaqueSortMode {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "opaque_sort_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOpaqueSortMode() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "transparency_sort_mode" field.</summary>
    public const int TransparencySortModeFieldNumber = 13;
    private readonly static global::PLUME.Sample.Unity.TransparencySortMode TransparencySortModeDefaultValue = global::PLUME.Sample.Unity.TransparencySortMode.Default;

    private global::PLUME.Sample.Unity.TransparencySortMode transparencySortMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.TransparencySortMode TransparencySortMode {
      get { if ((_hasBits0 & 2048) != 0) { return transparencySortMode_; } else { return TransparencySortModeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        transparencySortMode_ = value;
      }
    }
    /// <summary>Gets whether the "transparency_sort_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTransparencySortMode {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "transparency_sort_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTransparencySortMode() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "transparency_sort_axis" field.</summary>
    public const int TransparencySortAxisFieldNumber = 14;
    private global::PLUME.Sample.Common.Vector3 transparencySortAxis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.Vector3 TransparencySortAxis {
      get { return transparencySortAxis_; }
      set {
        transparencySortAxis_ = value;
      }
    }

    /// <summary>Field number for the "depth" field.</summary>
    public const int DepthFieldNumber = 15;
    private readonly static float DepthDefaultValue = 0F;

    private float depth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Depth {
      get { if ((_hasBits0 & 4096) != 0) { return depth_; } else { return DepthDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        depth_ = value;
      }
    }
    /// <summary>Gets whether the "depth" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDepth {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "depth" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDepth() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "aspect" field.</summary>
    public const int AspectFieldNumber = 16;
    private readonly static float AspectDefaultValue = 0F;

    private float aspect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Aspect {
      get { if ((_hasBits0 & 8192) != 0) { return aspect_; } else { return AspectDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        aspect_ = value;
      }
    }
    /// <summary>Gets whether the "aspect" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAspect {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "aspect" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAspect() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "culling_mask" field.</summary>
    public const int CullingMaskFieldNumber = 17;
    private readonly static int CullingMaskDefaultValue = 0;

    private int cullingMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CullingMask {
      get { if ((_hasBits0 & 16384) != 0) { return cullingMask_; } else { return CullingMaskDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        cullingMask_ = value;
      }
    }
    /// <summary>Gets whether the "culling_mask" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCullingMask {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "culling_mask" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCullingMask() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "event_mask" field.</summary>
    public const int EventMaskFieldNumber = 18;
    private readonly static int EventMaskDefaultValue = 0;

    private int eventMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EventMask {
      get { if ((_hasBits0 & 32768) != 0) { return eventMask_; } else { return EventMaskDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        eventMask_ = value;
      }
    }
    /// <summary>Gets whether the "event_mask" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEventMask {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "event_mask" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEventMask() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "layer_cull_spherical" field.</summary>
    public const int LayerCullSphericalFieldNumber = 19;
    private readonly static bool LayerCullSphericalDefaultValue = false;

    private bool layerCullSpherical_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LayerCullSpherical {
      get { if ((_hasBits0 & 65536) != 0) { return layerCullSpherical_; } else { return LayerCullSphericalDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        layerCullSpherical_ = value;
      }
    }
    /// <summary>Gets whether the "layer_cull_spherical" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLayerCullSpherical {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "layer_cull_spherical" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLayerCullSpherical() {
      _hasBits0 &= ~65536;
    }

    /// <summary>Field number for the "camera_type" field.</summary>
    public const int CameraTypeFieldNumber = 20;
    private readonly static uint CameraTypeDefaultValue = 0;

    private uint cameraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CameraType {
      get { if ((_hasBits0 & 131072) != 0) { return cameraType_; } else { return CameraTypeDefaultValue; } }
      set {
        _hasBits0 |= 131072;
        cameraType_ = value;
      }
    }
    /// <summary>Gets whether the "camera_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCameraType {
      get { return (_hasBits0 & 131072) != 0; }
    }
    /// <summary>Clears the value of the "camera_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCameraType() {
      _hasBits0 &= ~131072;
    }

    /// <summary>Field number for the "layer_cull_distances" field.</summary>
    public const int LayerCullDistancesFieldNumber = 21;
    private global::PLUME.Sample.Unity.CameraLayerCullDistances layerCullDistances_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.CameraLayerCullDistances LayerCullDistances {
      get { return layerCullDistances_; }
      set {
        layerCullDistances_ = value;
      }
    }

    /// <summary>Field number for the "use_occlusion_culling" field.</summary>
    public const int UseOcclusionCullingFieldNumber = 22;
    private readonly static bool UseOcclusionCullingDefaultValue = false;

    private bool useOcclusionCulling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseOcclusionCulling {
      get { if ((_hasBits0 & 262144) != 0) { return useOcclusionCulling_; } else { return UseOcclusionCullingDefaultValue; } }
      set {
        _hasBits0 |= 262144;
        useOcclusionCulling_ = value;
      }
    }
    /// <summary>Gets whether the "use_occlusion_culling" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseOcclusionCulling {
      get { return (_hasBits0 & 262144) != 0; }
    }
    /// <summary>Clears the value of the "use_occlusion_culling" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseOcclusionCulling() {
      _hasBits0 &= ~262144;
    }

    /// <summary>Field number for the "culling_matrix" field.</summary>
    public const int CullingMatrixFieldNumber = 23;
    private global::PLUME.Sample.Common.Matrix4x4 cullingMatrix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.Matrix4x4 CullingMatrix {
      get { return cullingMatrix_; }
      set {
        cullingMatrix_ = value;
      }
    }

    /// <summary>Field number for the "background_color" field.</summary>
    public const int BackgroundColorFieldNumber = 24;
    private global::PLUME.Sample.Common.Color backgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.Color BackgroundColor {
      get { return backgroundColor_; }
      set {
        backgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "clear_flags" field.</summary>
    public const int ClearFlagsFieldNumber = 25;
    private readonly static uint ClearFlagsDefaultValue = 0;

    private uint clearFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ClearFlags {
      get { if ((_hasBits0 & 524288) != 0) { return clearFlags_; } else { return ClearFlagsDefaultValue; } }
      set {
        _hasBits0 |= 524288;
        clearFlags_ = value;
      }
    }
    /// <summary>Gets whether the "clear_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClearFlags {
      get { return (_hasBits0 & 524288) != 0; }
    }
    /// <summary>Clears the value of the "clear_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClearFlags() {
      _hasBits0 &= ~524288;
    }

    /// <summary>Field number for the "depth_texture_mode" field.</summary>
    public const int DepthTextureModeFieldNumber = 26;
    private readonly static uint DepthTextureModeDefaultValue = 0;

    private uint depthTextureMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DepthTextureMode {
      get { if ((_hasBits0 & 1048576) != 0) { return depthTextureMode_; } else { return DepthTextureModeDefaultValue; } }
      set {
        _hasBits0 |= 1048576;
        depthTextureMode_ = value;
      }
    }
    /// <summary>Gets whether the "depth_texture_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDepthTextureMode {
      get { return (_hasBits0 & 1048576) != 0; }
    }
    /// <summary>Clears the value of the "depth_texture_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDepthTextureMode() {
      _hasBits0 &= ~1048576;
    }

    /// <summary>Field number for the "clear_stencil_after_lighting_pass" field.</summary>
    public const int ClearStencilAfterLightingPassFieldNumber = 27;
    private readonly static bool ClearStencilAfterLightingPassDefaultValue = false;

    private bool clearStencilAfterLightingPass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ClearStencilAfterLightingPass {
      get { if ((_hasBits0 & 2097152) != 0) { return clearStencilAfterLightingPass_; } else { return ClearStencilAfterLightingPassDefaultValue; } }
      set {
        _hasBits0 |= 2097152;
        clearStencilAfterLightingPass_ = value;
      }
    }
    /// <summary>Gets whether the "clear_stencil_after_lighting_pass" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasClearStencilAfterLightingPass {
      get { return (_hasBits0 & 2097152) != 0; }
    }
    /// <summary>Clears the value of the "clear_stencil_after_lighting_pass" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearClearStencilAfterLightingPass() {
      _hasBits0 &= ~2097152;
    }

    /// <summary>Field number for the "use_physical_properties" field.</summary>
    public const int UsePhysicalPropertiesFieldNumber = 28;
    private readonly static bool UsePhysicalPropertiesDefaultValue = false;

    private bool usePhysicalProperties_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UsePhysicalProperties {
      get { if ((_hasBits0 & 4194304) != 0) { return usePhysicalProperties_; } else { return UsePhysicalPropertiesDefaultValue; } }
      set {
        _hasBits0 |= 4194304;
        usePhysicalProperties_ = value;
      }
    }
    /// <summary>Gets whether the "use_physical_properties" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUsePhysicalProperties {
      get { return (_hasBits0 & 4194304) != 0; }
    }
    /// <summary>Clears the value of the "use_physical_properties" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUsePhysicalProperties() {
      _hasBits0 &= ~4194304;
    }

    /// <summary>Field number for the "sensor_size" field.</summary>
    public const int SensorSizeFieldNumber = 29;
    private global::PLUME.Sample.Common.Vector2 sensorSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.Vector2 SensorSize {
      get { return sensorSize_; }
      set {
        sensorSize_ = value;
      }
    }

    /// <summary>Field number for the "lens_shift" field.</summary>
    public const int LensShiftFieldNumber = 30;
    private global::PLUME.Sample.Common.Vector2 lensShift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.Vector2 LensShift {
      get { return lensShift_; }
      set {
        lensShift_ = value;
      }
    }

    /// <summary>Field number for the "focal_length" field.</summary>
    public const int FocalLengthFieldNumber = 31;
    private readonly static float FocalLengthDefaultValue = 0F;

    private float focalLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FocalLength {
      get { if ((_hasBits0 & 8388608) != 0) { return focalLength_; } else { return FocalLengthDefaultValue; } }
      set {
        _hasBits0 |= 8388608;
        focalLength_ = value;
      }
    }
    /// <summary>Gets whether the "focal_length" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFocalLength {
      get { return (_hasBits0 & 8388608) != 0; }
    }
    /// <summary>Clears the value of the "focal_length" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFocalLength() {
      _hasBits0 &= ~8388608;
    }

    /// <summary>Field number for the "gate_fit" field.</summary>
    public const int GateFitFieldNumber = 32;
    private readonly static global::PLUME.Sample.Unity.CameraGateFitMode GateFitDefaultValue = global::PLUME.Sample.Unity.CameraGateFitMode.None;

    private global::PLUME.Sample.Unity.CameraGateFitMode gateFit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.CameraGateFitMode GateFit {
      get { if ((_hasBits0 & 16777216) != 0) { return gateFit_; } else { return GateFitDefaultValue; } }
      set {
        _hasBits0 |= 16777216;
        gateFit_ = value;
      }
    }
    /// <summary>Gets whether the "gate_fit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGateFit {
      get { return (_hasBits0 & 16777216) != 0; }
    }
    /// <summary>Clears the value of the "gate_fit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGateFit() {
      _hasBits0 &= ~16777216;
    }

    /// <summary>Field number for the "rect" field.</summary>
    public const int RectFieldNumber = 33;
    private global::PLUME.Sample.Common.Rect rect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.Rect Rect {
      get { return rect_; }
      set {
        rect_ = value;
      }
    }

    /// <summary>Field number for the "pixel_rect" field.</summary>
    public const int PixelRectFieldNumber = 34;
    private global::PLUME.Sample.Common.Rect pixelRect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.Rect PixelRect {
      get { return pixelRect_; }
      set {
        pixelRect_ = value;
      }
    }

    /// <summary>Field number for the "target_texture_id" field.</summary>
    public const int TargetTextureIdFieldNumber = 35;
    private global::PLUME.Sample.Unity.AssetIdentifier targetTextureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.AssetIdentifier TargetTextureId {
      get { return targetTextureId_; }
      set {
        targetTextureId_ = value;
      }
    }

    /// <summary>Field number for the "target_display" field.</summary>
    public const int TargetDisplayFieldNumber = 36;
    private readonly static int TargetDisplayDefaultValue = 0;

    private int targetDisplay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TargetDisplay {
      get { if ((_hasBits0 & 33554432) != 0) { return targetDisplay_; } else { return TargetDisplayDefaultValue; } }
      set {
        _hasBits0 |= 33554432;
        targetDisplay_ = value;
      }
    }
    /// <summary>Gets whether the "target_display" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTargetDisplay {
      get { return (_hasBits0 & 33554432) != 0; }
    }
    /// <summary>Clears the value of the "target_display" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTargetDisplay() {
      _hasBits0 &= ~33554432;
    }

    /// <summary>Field number for the "world_to_camera_matrix" field.</summary>
    public const int WorldToCameraMatrixFieldNumber = 37;
    private global::PLUME.Sample.Common.Matrix4x4 worldToCameraMatrix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.Matrix4x4 WorldToCameraMatrix {
      get { return worldToCameraMatrix_; }
      set {
        worldToCameraMatrix_ = value;
      }
    }

    /// <summary>Field number for the "projection_matrix" field.</summary>
    public const int ProjectionMatrixFieldNumber = 38;
    private global::PLUME.Sample.Common.Matrix4x4 projectionMatrix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.Matrix4x4 ProjectionMatrix {
      get { return projectionMatrix_; }
      set {
        projectionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "non_jittered_projection_matrix" field.</summary>
    public const int NonJitteredProjectionMatrixFieldNumber = 39;
    private global::PLUME.Sample.Common.Matrix4x4 nonJitteredProjectionMatrix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Common.Matrix4x4 NonJitteredProjectionMatrix {
      get { return nonJitteredProjectionMatrix_; }
      set {
        nonJitteredProjectionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "use_jittered_projection_matrix_for_transparent_rendering" field.</summary>
    public const int UseJitteredProjectionMatrixForTransparentRenderingFieldNumber = 40;
    private readonly static bool UseJitteredProjectionMatrixForTransparentRenderingDefaultValue = false;

    private bool useJitteredProjectionMatrixForTransparentRendering_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseJitteredProjectionMatrixForTransparentRendering {
      get { if ((_hasBits0 & 67108864) != 0) { return useJitteredProjectionMatrixForTransparentRendering_; } else { return UseJitteredProjectionMatrixForTransparentRenderingDefaultValue; } }
      set {
        _hasBits0 |= 67108864;
        useJitteredProjectionMatrixForTransparentRendering_ = value;
      }
    }
    /// <summary>Gets whether the "use_jittered_projection_matrix_for_transparent_rendering" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseJitteredProjectionMatrixForTransparentRendering {
      get { return (_hasBits0 & 67108864) != 0; }
    }
    /// <summary>Clears the value of the "use_jittered_projection_matrix_for_transparent_rendering" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseJitteredProjectionMatrixForTransparentRendering() {
      _hasBits0 &= ~67108864;
    }

    /// <summary>Field number for the "stereo_separation" field.</summary>
    public const int StereoSeparationFieldNumber = 41;
    private readonly static float StereoSeparationDefaultValue = 0F;

    private float stereoSeparation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StereoSeparation {
      get { if ((_hasBits0 & 134217728) != 0) { return stereoSeparation_; } else { return StereoSeparationDefaultValue; } }
      set {
        _hasBits0 |= 134217728;
        stereoSeparation_ = value;
      }
    }
    /// <summary>Gets whether the "stereo_separation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStereoSeparation {
      get { return (_hasBits0 & 134217728) != 0; }
    }
    /// <summary>Clears the value of the "stereo_separation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStereoSeparation() {
      _hasBits0 &= ~134217728;
    }

    /// <summary>Field number for the "stereo_convergence" field.</summary>
    public const int StereoConvergenceFieldNumber = 42;
    private readonly static float StereoConvergenceDefaultValue = 0F;

    private float stereoConvergence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StereoConvergence {
      get { if ((_hasBits0 & 268435456) != 0) { return stereoConvergence_; } else { return StereoConvergenceDefaultValue; } }
      set {
        _hasBits0 |= 268435456;
        stereoConvergence_ = value;
      }
    }
    /// <summary>Gets whether the "stereo_convergence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStereoConvergence {
      get { return (_hasBits0 & 268435456) != 0; }
    }
    /// <summary>Clears the value of the "stereo_convergence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStereoConvergence() {
      _hasBits0 &= ~268435456;
    }

    /// <summary>Field number for the "stereo_target_eye" field.</summary>
    public const int StereoTargetEyeFieldNumber = 43;
    private readonly static global::PLUME.Sample.Unity.CameraStereoTargetEyeMask StereoTargetEyeDefaultValue = global::PLUME.Sample.Unity.CameraStereoTargetEyeMask.None;

    private global::PLUME.Sample.Unity.CameraStereoTargetEyeMask stereoTargetEye_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::PLUME.Sample.Unity.CameraStereoTargetEyeMask StereoTargetEye {
      get { if ((_hasBits0 & 536870912) != 0) { return stereoTargetEye_; } else { return StereoTargetEyeDefaultValue; } }
      set {
        _hasBits0 |= 536870912;
        stereoTargetEye_ = value;
      }
    }
    /// <summary>Gets whether the "stereo_target_eye" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStereoTargetEye {
      get { return (_hasBits0 & 536870912) != 0; }
    }
    /// <summary>Clears the value of the "stereo_target_eye" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStereoTargetEye() {
      _hasBits0 &= ~536870912;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CameraUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CameraUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NearClipPlane, other.NearClipPlane)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FarClipPlane, other.FarClipPlane)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FieldOfView, other.FieldOfView)) return false;
      if (RenderingPath != other.RenderingPath) return false;
      if (AllowHdr != other.AllowHdr) return false;
      if (AllowMsaa != other.AllowMsaa) return false;
      if (AllowDynamicResolution != other.AllowDynamicResolution) return false;
      if (ForceIntoRenderTexture != other.ForceIntoRenderTexture) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrthographicSize, other.OrthographicSize)) return false;
      if (Orthographic != other.Orthographic) return false;
      if (OpaqueSortMode != other.OpaqueSortMode) return false;
      if (TransparencySortMode != other.TransparencySortMode) return false;
      if (!object.Equals(TransparencySortAxis, other.TransparencySortAxis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Depth, other.Depth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Aspect, other.Aspect)) return false;
      if (CullingMask != other.CullingMask) return false;
      if (EventMask != other.EventMask) return false;
      if (LayerCullSpherical != other.LayerCullSpherical) return false;
      if (CameraType != other.CameraType) return false;
      if (!object.Equals(LayerCullDistances, other.LayerCullDistances)) return false;
      if (UseOcclusionCulling != other.UseOcclusionCulling) return false;
      if (!object.Equals(CullingMatrix, other.CullingMatrix)) return false;
      if (!object.Equals(BackgroundColor, other.BackgroundColor)) return false;
      if (ClearFlags != other.ClearFlags) return false;
      if (DepthTextureMode != other.DepthTextureMode) return false;
      if (ClearStencilAfterLightingPass != other.ClearStencilAfterLightingPass) return false;
      if (UsePhysicalProperties != other.UsePhysicalProperties) return false;
      if (!object.Equals(SensorSize, other.SensorSize)) return false;
      if (!object.Equals(LensShift, other.LensShift)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FocalLength, other.FocalLength)) return false;
      if (GateFit != other.GateFit) return false;
      if (!object.Equals(Rect, other.Rect)) return false;
      if (!object.Equals(PixelRect, other.PixelRect)) return false;
      if (!object.Equals(TargetTextureId, other.TargetTextureId)) return false;
      if (TargetDisplay != other.TargetDisplay) return false;
      if (!object.Equals(WorldToCameraMatrix, other.WorldToCameraMatrix)) return false;
      if (!object.Equals(ProjectionMatrix, other.ProjectionMatrix)) return false;
      if (!object.Equals(NonJitteredProjectionMatrix, other.NonJitteredProjectionMatrix)) return false;
      if (UseJitteredProjectionMatrixForTransparentRendering != other.UseJitteredProjectionMatrixForTransparentRendering) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StereoSeparation, other.StereoSeparation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StereoConvergence, other.StereoConvergence)) return false;
      if (StereoTargetEye != other.StereoTargetEye) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (HasNearClipPlane) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NearClipPlane);
      if (HasFarClipPlane) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FarClipPlane);
      if (HasFieldOfView) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FieldOfView);
      if (HasRenderingPath) hash ^= RenderingPath.GetHashCode();
      if (HasAllowHdr) hash ^= AllowHdr.GetHashCode();
      if (HasAllowMsaa) hash ^= AllowMsaa.GetHashCode();
      if (HasAllowDynamicResolution) hash ^= AllowDynamicResolution.GetHashCode();
      if (HasForceIntoRenderTexture) hash ^= ForceIntoRenderTexture.GetHashCode();
      if (HasOrthographicSize) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrthographicSize);
      if (HasOrthographic) hash ^= Orthographic.GetHashCode();
      if (HasOpaqueSortMode) hash ^= OpaqueSortMode.GetHashCode();
      if (HasTransparencySortMode) hash ^= TransparencySortMode.GetHashCode();
      if (transparencySortAxis_ != null) hash ^= TransparencySortAxis.GetHashCode();
      if (HasDepth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Depth);
      if (HasAspect) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Aspect);
      if (HasCullingMask) hash ^= CullingMask.GetHashCode();
      if (HasEventMask) hash ^= EventMask.GetHashCode();
      if (HasLayerCullSpherical) hash ^= LayerCullSpherical.GetHashCode();
      if (HasCameraType) hash ^= CameraType.GetHashCode();
      if (layerCullDistances_ != null) hash ^= LayerCullDistances.GetHashCode();
      if (HasUseOcclusionCulling) hash ^= UseOcclusionCulling.GetHashCode();
      if (cullingMatrix_ != null) hash ^= CullingMatrix.GetHashCode();
      if (backgroundColor_ != null) hash ^= BackgroundColor.GetHashCode();
      if (HasClearFlags) hash ^= ClearFlags.GetHashCode();
      if (HasDepthTextureMode) hash ^= DepthTextureMode.GetHashCode();
      if (HasClearStencilAfterLightingPass) hash ^= ClearStencilAfterLightingPass.GetHashCode();
      if (HasUsePhysicalProperties) hash ^= UsePhysicalProperties.GetHashCode();
      if (sensorSize_ != null) hash ^= SensorSize.GetHashCode();
      if (lensShift_ != null) hash ^= LensShift.GetHashCode();
      if (HasFocalLength) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FocalLength);
      if (HasGateFit) hash ^= GateFit.GetHashCode();
      if (rect_ != null) hash ^= Rect.GetHashCode();
      if (pixelRect_ != null) hash ^= PixelRect.GetHashCode();
      if (targetTextureId_ != null) hash ^= TargetTextureId.GetHashCode();
      if (HasTargetDisplay) hash ^= TargetDisplay.GetHashCode();
      if (worldToCameraMatrix_ != null) hash ^= WorldToCameraMatrix.GetHashCode();
      if (projectionMatrix_ != null) hash ^= ProjectionMatrix.GetHashCode();
      if (nonJitteredProjectionMatrix_ != null) hash ^= NonJitteredProjectionMatrix.GetHashCode();
      if (HasUseJitteredProjectionMatrixForTransparentRendering) hash ^= UseJitteredProjectionMatrixForTransparentRendering.GetHashCode();
      if (HasStereoSeparation) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StereoSeparation);
      if (HasStereoConvergence) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StereoConvergence);
      if (HasStereoTargetEye) hash ^= StereoTargetEye.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (HasNearClipPlane) {
        output.WriteRawTag(21);
        output.WriteFloat(NearClipPlane);
      }
      if (HasFarClipPlane) {
        output.WriteRawTag(29);
        output.WriteFloat(FarClipPlane);
      }
      if (HasFieldOfView) {
        output.WriteRawTag(37);
        output.WriteFloat(FieldOfView);
      }
      if (HasRenderingPath) {
        output.WriteRawTag(40);
        output.WriteEnum((int) RenderingPath);
      }
      if (HasAllowHdr) {
        output.WriteRawTag(48);
        output.WriteBool(AllowHdr);
      }
      if (HasAllowMsaa) {
        output.WriteRawTag(56);
        output.WriteBool(AllowMsaa);
      }
      if (HasAllowDynamicResolution) {
        output.WriteRawTag(64);
        output.WriteBool(AllowDynamicResolution);
      }
      if (HasForceIntoRenderTexture) {
        output.WriteRawTag(72);
        output.WriteBool(ForceIntoRenderTexture);
      }
      if (HasOrthographicSize) {
        output.WriteRawTag(85);
        output.WriteFloat(OrthographicSize);
      }
      if (HasOrthographic) {
        output.WriteRawTag(88);
        output.WriteBool(Orthographic);
      }
      if (HasOpaqueSortMode) {
        output.WriteRawTag(96);
        output.WriteEnum((int) OpaqueSortMode);
      }
      if (HasTransparencySortMode) {
        output.WriteRawTag(104);
        output.WriteEnum((int) TransparencySortMode);
      }
      if (transparencySortAxis_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TransparencySortAxis);
      }
      if (HasDepth) {
        output.WriteRawTag(125);
        output.WriteFloat(Depth);
      }
      if (HasAspect) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Aspect);
      }
      if (HasCullingMask) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CullingMask);
      }
      if (HasEventMask) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(EventMask);
      }
      if (HasLayerCullSpherical) {
        output.WriteRawTag(152, 1);
        output.WriteBool(LayerCullSpherical);
      }
      if (HasCameraType) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(CameraType);
      }
      if (layerCullDistances_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(LayerCullDistances);
      }
      if (HasUseOcclusionCulling) {
        output.WriteRawTag(176, 1);
        output.WriteBool(UseOcclusionCulling);
      }
      if (cullingMatrix_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(CullingMatrix);
      }
      if (backgroundColor_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(BackgroundColor);
      }
      if (HasClearFlags) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(ClearFlags);
      }
      if (HasDepthTextureMode) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(DepthTextureMode);
      }
      if (HasClearStencilAfterLightingPass) {
        output.WriteRawTag(216, 1);
        output.WriteBool(ClearStencilAfterLightingPass);
      }
      if (HasUsePhysicalProperties) {
        output.WriteRawTag(224, 1);
        output.WriteBool(UsePhysicalProperties);
      }
      if (sensorSize_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(SensorSize);
      }
      if (lensShift_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(LensShift);
      }
      if (HasFocalLength) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(FocalLength);
      }
      if (HasGateFit) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) GateFit);
      }
      if (rect_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(Rect);
      }
      if (pixelRect_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(PixelRect);
      }
      if (targetTextureId_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(TargetTextureId);
      }
      if (HasTargetDisplay) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(TargetDisplay);
      }
      if (worldToCameraMatrix_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(WorldToCameraMatrix);
      }
      if (projectionMatrix_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(ProjectionMatrix);
      }
      if (nonJitteredProjectionMatrix_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(NonJitteredProjectionMatrix);
      }
      if (HasUseJitteredProjectionMatrixForTransparentRendering) {
        output.WriteRawTag(192, 2);
        output.WriteBool(UseJitteredProjectionMatrixForTransparentRendering);
      }
      if (HasStereoSeparation) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(StereoSeparation);
      }
      if (HasStereoConvergence) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(StereoConvergence);
      }
      if (HasStereoTargetEye) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) StereoTargetEye);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (HasNearClipPlane) {
        output.WriteRawTag(21);
        output.WriteFloat(NearClipPlane);
      }
      if (HasFarClipPlane) {
        output.WriteRawTag(29);
        output.WriteFloat(FarClipPlane);
      }
      if (HasFieldOfView) {
        output.WriteRawTag(37);
        output.WriteFloat(FieldOfView);
      }
      if (HasRenderingPath) {
        output.WriteRawTag(40);
        output.WriteEnum((int) RenderingPath);
      }
      if (HasAllowHdr) {
        output.WriteRawTag(48);
        output.WriteBool(AllowHdr);
      }
      if (HasAllowMsaa) {
        output.WriteRawTag(56);
        output.WriteBool(AllowMsaa);
      }
      if (HasAllowDynamicResolution) {
        output.WriteRawTag(64);
        output.WriteBool(AllowDynamicResolution);
      }
      if (HasForceIntoRenderTexture) {
        output.WriteRawTag(72);
        output.WriteBool(ForceIntoRenderTexture);
      }
      if (HasOrthographicSize) {
        output.WriteRawTag(85);
        output.WriteFloat(OrthographicSize);
      }
      if (HasOrthographic) {
        output.WriteRawTag(88);
        output.WriteBool(Orthographic);
      }
      if (HasOpaqueSortMode) {
        output.WriteRawTag(96);
        output.WriteEnum((int) OpaqueSortMode);
      }
      if (HasTransparencySortMode) {
        output.WriteRawTag(104);
        output.WriteEnum((int) TransparencySortMode);
      }
      if (transparencySortAxis_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(TransparencySortAxis);
      }
      if (HasDepth) {
        output.WriteRawTag(125);
        output.WriteFloat(Depth);
      }
      if (HasAspect) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Aspect);
      }
      if (HasCullingMask) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CullingMask);
      }
      if (HasEventMask) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(EventMask);
      }
      if (HasLayerCullSpherical) {
        output.WriteRawTag(152, 1);
        output.WriteBool(LayerCullSpherical);
      }
      if (HasCameraType) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(CameraType);
      }
      if (layerCullDistances_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(LayerCullDistances);
      }
      if (HasUseOcclusionCulling) {
        output.WriteRawTag(176, 1);
        output.WriteBool(UseOcclusionCulling);
      }
      if (cullingMatrix_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(CullingMatrix);
      }
      if (backgroundColor_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(BackgroundColor);
      }
      if (HasClearFlags) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(ClearFlags);
      }
      if (HasDepthTextureMode) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(DepthTextureMode);
      }
      if (HasClearStencilAfterLightingPass) {
        output.WriteRawTag(216, 1);
        output.WriteBool(ClearStencilAfterLightingPass);
      }
      if (HasUsePhysicalProperties) {
        output.WriteRawTag(224, 1);
        output.WriteBool(UsePhysicalProperties);
      }
      if (sensorSize_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(SensorSize);
      }
      if (lensShift_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(LensShift);
      }
      if (HasFocalLength) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(FocalLength);
      }
      if (HasGateFit) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) GateFit);
      }
      if (rect_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(Rect);
      }
      if (pixelRect_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(PixelRect);
      }
      if (targetTextureId_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(TargetTextureId);
      }
      if (HasTargetDisplay) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(TargetDisplay);
      }
      if (worldToCameraMatrix_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(WorldToCameraMatrix);
      }
      if (projectionMatrix_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(ProjectionMatrix);
      }
      if (nonJitteredProjectionMatrix_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(NonJitteredProjectionMatrix);
      }
      if (HasUseJitteredProjectionMatrixForTransparentRendering) {
        output.WriteRawTag(192, 2);
        output.WriteBool(UseJitteredProjectionMatrixForTransparentRendering);
      }
      if (HasStereoSeparation) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(StereoSeparation);
      }
      if (HasStereoConvergence) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(StereoConvergence);
      }
      if (HasStereoTargetEye) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) StereoTargetEye);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (HasNearClipPlane) {
        size += 1 + 4;
      }
      if (HasFarClipPlane) {
        size += 1 + 4;
      }
      if (HasFieldOfView) {
        size += 1 + 4;
      }
      if (HasRenderingPath) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RenderingPath);
      }
      if (HasAllowHdr) {
        size += 1 + 1;
      }
      if (HasAllowMsaa) {
        size += 1 + 1;
      }
      if (HasAllowDynamicResolution) {
        size += 1 + 1;
      }
      if (HasForceIntoRenderTexture) {
        size += 1 + 1;
      }
      if (HasOrthographicSize) {
        size += 1 + 4;
      }
      if (HasOrthographic) {
        size += 1 + 1;
      }
      if (HasOpaqueSortMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OpaqueSortMode);
      }
      if (HasTransparencySortMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransparencySortMode);
      }
      if (transparencySortAxis_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransparencySortAxis);
      }
      if (HasDepth) {
        size += 1 + 4;
      }
      if (HasAspect) {
        size += 2 + 4;
      }
      if (HasCullingMask) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CullingMask);
      }
      if (HasEventMask) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EventMask);
      }
      if (HasLayerCullSpherical) {
        size += 2 + 1;
      }
      if (HasCameraType) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CameraType);
      }
      if (layerCullDistances_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LayerCullDistances);
      }
      if (HasUseOcclusionCulling) {
        size += 2 + 1;
      }
      if (cullingMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CullingMatrix);
      }
      if (backgroundColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BackgroundColor);
      }
      if (HasClearFlags) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ClearFlags);
      }
      if (HasDepthTextureMode) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DepthTextureMode);
      }
      if (HasClearStencilAfterLightingPass) {
        size += 2 + 1;
      }
      if (HasUsePhysicalProperties) {
        size += 2 + 1;
      }
      if (sensorSize_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SensorSize);
      }
      if (lensShift_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LensShift);
      }
      if (HasFocalLength) {
        size += 2 + 4;
      }
      if (HasGateFit) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GateFit);
      }
      if (rect_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rect);
      }
      if (pixelRect_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PixelRect);
      }
      if (targetTextureId_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TargetTextureId);
      }
      if (HasTargetDisplay) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TargetDisplay);
      }
      if (worldToCameraMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WorldToCameraMatrix);
      }
      if (projectionMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProjectionMatrix);
      }
      if (nonJitteredProjectionMatrix_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NonJitteredProjectionMatrix);
      }
      if (HasUseJitteredProjectionMatrixForTransparentRendering) {
        size += 2 + 1;
      }
      if (HasStereoSeparation) {
        size += 2 + 4;
      }
      if (HasStereoConvergence) {
        size += 2 + 4;
      }
      if (HasStereoTargetEye) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StereoTargetEye);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CameraUpdate other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.HasNearClipPlane) {
        NearClipPlane = other.NearClipPlane;
      }
      if (other.HasFarClipPlane) {
        FarClipPlane = other.FarClipPlane;
      }
      if (other.HasFieldOfView) {
        FieldOfView = other.FieldOfView;
      }
      if (other.HasRenderingPath) {
        RenderingPath = other.RenderingPath;
      }
      if (other.HasAllowHdr) {
        AllowHdr = other.AllowHdr;
      }
      if (other.HasAllowMsaa) {
        AllowMsaa = other.AllowMsaa;
      }
      if (other.HasAllowDynamicResolution) {
        AllowDynamicResolution = other.AllowDynamicResolution;
      }
      if (other.HasForceIntoRenderTexture) {
        ForceIntoRenderTexture = other.ForceIntoRenderTexture;
      }
      if (other.HasOrthographicSize) {
        OrthographicSize = other.OrthographicSize;
      }
      if (other.HasOrthographic) {
        Orthographic = other.Orthographic;
      }
      if (other.HasOpaqueSortMode) {
        OpaqueSortMode = other.OpaqueSortMode;
      }
      if (other.HasTransparencySortMode) {
        TransparencySortMode = other.TransparencySortMode;
      }
      if (other.transparencySortAxis_ != null) {
        if (transparencySortAxis_ == null) {
          TransparencySortAxis = new global::PLUME.Sample.Common.Vector3();
        }
        TransparencySortAxis.MergeFrom(other.TransparencySortAxis);
      }
      if (other.HasDepth) {
        Depth = other.Depth;
      }
      if (other.HasAspect) {
        Aspect = other.Aspect;
      }
      if (other.HasCullingMask) {
        CullingMask = other.CullingMask;
      }
      if (other.HasEventMask) {
        EventMask = other.EventMask;
      }
      if (other.HasLayerCullSpherical) {
        LayerCullSpherical = other.LayerCullSpherical;
      }
      if (other.HasCameraType) {
        CameraType = other.CameraType;
      }
      if (other.layerCullDistances_ != null) {
        if (layerCullDistances_ == null) {
          LayerCullDistances = new global::PLUME.Sample.Unity.CameraLayerCullDistances();
        }
        LayerCullDistances.MergeFrom(other.LayerCullDistances);
      }
      if (other.HasUseOcclusionCulling) {
        UseOcclusionCulling = other.UseOcclusionCulling;
      }
      if (other.cullingMatrix_ != null) {
        if (cullingMatrix_ == null) {
          CullingMatrix = new global::PLUME.Sample.Common.Matrix4x4();
        }
        CullingMatrix.MergeFrom(other.CullingMatrix);
      }
      if (other.backgroundColor_ != null) {
        if (backgroundColor_ == null) {
          BackgroundColor = new global::PLUME.Sample.Common.Color();
        }
        BackgroundColor.MergeFrom(other.BackgroundColor);
      }
      if (other.HasClearFlags) {
        ClearFlags = other.ClearFlags;
      }
      if (other.HasDepthTextureMode) {
        DepthTextureMode = other.DepthTextureMode;
      }
      if (other.HasClearStencilAfterLightingPass) {
        ClearStencilAfterLightingPass = other.ClearStencilAfterLightingPass;
      }
      if (other.HasUsePhysicalProperties) {
        UsePhysicalProperties = other.UsePhysicalProperties;
      }
      if (other.sensorSize_ != null) {
        if (sensorSize_ == null) {
          SensorSize = new global::PLUME.Sample.Common.Vector2();
        }
        SensorSize.MergeFrom(other.SensorSize);
      }
      if (other.lensShift_ != null) {
        if (lensShift_ == null) {
          LensShift = new global::PLUME.Sample.Common.Vector2();
        }
        LensShift.MergeFrom(other.LensShift);
      }
      if (other.HasFocalLength) {
        FocalLength = other.FocalLength;
      }
      if (other.HasGateFit) {
        GateFit = other.GateFit;
      }
      if (other.rect_ != null) {
        if (rect_ == null) {
          Rect = new global::PLUME.Sample.Common.Rect();
        }
        Rect.MergeFrom(other.Rect);
      }
      if (other.pixelRect_ != null) {
        if (pixelRect_ == null) {
          PixelRect = new global::PLUME.Sample.Common.Rect();
        }
        PixelRect.MergeFrom(other.PixelRect);
      }
      if (other.targetTextureId_ != null) {
        if (targetTextureId_ == null) {
          TargetTextureId = new global::PLUME.Sample.Unity.AssetIdentifier();
        }
        TargetTextureId.MergeFrom(other.TargetTextureId);
      }
      if (other.HasTargetDisplay) {
        TargetDisplay = other.TargetDisplay;
      }
      if (other.worldToCameraMatrix_ != null) {
        if (worldToCameraMatrix_ == null) {
          WorldToCameraMatrix = new global::PLUME.Sample.Common.Matrix4x4();
        }
        WorldToCameraMatrix.MergeFrom(other.WorldToCameraMatrix);
      }
      if (other.projectionMatrix_ != null) {
        if (projectionMatrix_ == null) {
          ProjectionMatrix = new global::PLUME.Sample.Common.Matrix4x4();
        }
        ProjectionMatrix.MergeFrom(other.ProjectionMatrix);
      }
      if (other.nonJitteredProjectionMatrix_ != null) {
        if (nonJitteredProjectionMatrix_ == null) {
          NonJitteredProjectionMatrix = new global::PLUME.Sample.Common.Matrix4x4();
        }
        NonJitteredProjectionMatrix.MergeFrom(other.NonJitteredProjectionMatrix);
      }
      if (other.HasUseJitteredProjectionMatrixForTransparentRendering) {
        UseJitteredProjectionMatrixForTransparentRendering = other.UseJitteredProjectionMatrixForTransparentRendering;
      }
      if (other.HasStereoSeparation) {
        StereoSeparation = other.StereoSeparation;
      }
      if (other.HasStereoConvergence) {
        StereoConvergence = other.StereoConvergence;
      }
      if (other.HasStereoTargetEye) {
        StereoTargetEye = other.StereoTargetEye;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
          case 21: {
            NearClipPlane = input.ReadFloat();
            break;
          }
          case 29: {
            FarClipPlane = input.ReadFloat();
            break;
          }
          case 37: {
            FieldOfView = input.ReadFloat();
            break;
          }
          case 40: {
            RenderingPath = (global::PLUME.Sample.Unity.RenderingPath) input.ReadEnum();
            break;
          }
          case 48: {
            AllowHdr = input.ReadBool();
            break;
          }
          case 56: {
            AllowMsaa = input.ReadBool();
            break;
          }
          case 64: {
            AllowDynamicResolution = input.ReadBool();
            break;
          }
          case 72: {
            ForceIntoRenderTexture = input.ReadBool();
            break;
          }
          case 85: {
            OrthographicSize = input.ReadFloat();
            break;
          }
          case 88: {
            Orthographic = input.ReadBool();
            break;
          }
          case 96: {
            OpaqueSortMode = (global::PLUME.Sample.Unity.OpaqueSortMode) input.ReadEnum();
            break;
          }
          case 104: {
            TransparencySortMode = (global::PLUME.Sample.Unity.TransparencySortMode) input.ReadEnum();
            break;
          }
          case 114: {
            if (transparencySortAxis_ == null) {
              TransparencySortAxis = new global::PLUME.Sample.Common.Vector3();
            }
            input.ReadMessage(TransparencySortAxis);
            break;
          }
          case 125: {
            Depth = input.ReadFloat();
            break;
          }
          case 133: {
            Aspect = input.ReadFloat();
            break;
          }
          case 136: {
            CullingMask = input.ReadInt32();
            break;
          }
          case 144: {
            EventMask = input.ReadInt32();
            break;
          }
          case 152: {
            LayerCullSpherical = input.ReadBool();
            break;
          }
          case 160: {
            CameraType = input.ReadUInt32();
            break;
          }
          case 170: {
            if (layerCullDistances_ == null) {
              LayerCullDistances = new global::PLUME.Sample.Unity.CameraLayerCullDistances();
            }
            input.ReadMessage(LayerCullDistances);
            break;
          }
          case 176: {
            UseOcclusionCulling = input.ReadBool();
            break;
          }
          case 186: {
            if (cullingMatrix_ == null) {
              CullingMatrix = new global::PLUME.Sample.Common.Matrix4x4();
            }
            input.ReadMessage(CullingMatrix);
            break;
          }
          case 194: {
            if (backgroundColor_ == null) {
              BackgroundColor = new global::PLUME.Sample.Common.Color();
            }
            input.ReadMessage(BackgroundColor);
            break;
          }
          case 200: {
            ClearFlags = input.ReadUInt32();
            break;
          }
          case 208: {
            DepthTextureMode = input.ReadUInt32();
            break;
          }
          case 216: {
            ClearStencilAfterLightingPass = input.ReadBool();
            break;
          }
          case 224: {
            UsePhysicalProperties = input.ReadBool();
            break;
          }
          case 234: {
            if (sensorSize_ == null) {
              SensorSize = new global::PLUME.Sample.Common.Vector2();
            }
            input.ReadMessage(SensorSize);
            break;
          }
          case 242: {
            if (lensShift_ == null) {
              LensShift = new global::PLUME.Sample.Common.Vector2();
            }
            input.ReadMessage(LensShift);
            break;
          }
          case 253: {
            FocalLength = input.ReadFloat();
            break;
          }
          case 256: {
            GateFit = (global::PLUME.Sample.Unity.CameraGateFitMode) input.ReadEnum();
            break;
          }
          case 266: {
            if (rect_ == null) {
              Rect = new global::PLUME.Sample.Common.Rect();
            }
            input.ReadMessage(Rect);
            break;
          }
          case 274: {
            if (pixelRect_ == null) {
              PixelRect = new global::PLUME.Sample.Common.Rect();
            }
            input.ReadMessage(PixelRect);
            break;
          }
          case 282: {
            if (targetTextureId_ == null) {
              TargetTextureId = new global::PLUME.Sample.Unity.AssetIdentifier();
            }
            input.ReadMessage(TargetTextureId);
            break;
          }
          case 288: {
            TargetDisplay = input.ReadInt32();
            break;
          }
          case 298: {
            if (worldToCameraMatrix_ == null) {
              WorldToCameraMatrix = new global::PLUME.Sample.Common.Matrix4x4();
            }
            input.ReadMessage(WorldToCameraMatrix);
            break;
          }
          case 306: {
            if (projectionMatrix_ == null) {
              ProjectionMatrix = new global::PLUME.Sample.Common.Matrix4x4();
            }
            input.ReadMessage(ProjectionMatrix);
            break;
          }
          case 314: {
            if (nonJitteredProjectionMatrix_ == null) {
              NonJitteredProjectionMatrix = new global::PLUME.Sample.Common.Matrix4x4();
            }
            input.ReadMessage(NonJitteredProjectionMatrix);
            break;
          }
          case 320: {
            UseJitteredProjectionMatrixForTransparentRendering = input.ReadBool();
            break;
          }
          case 333: {
            StereoSeparation = input.ReadFloat();
            break;
          }
          case 341: {
            StereoConvergence = input.ReadFloat();
            break;
          }
          case 344: {
            StereoTargetEye = (global::PLUME.Sample.Unity.CameraStereoTargetEyeMask) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::PLUME.Sample.Unity.ComponentIdentifier();
            }
            input.ReadMessage(Id);
            break;
          }
          case 21: {
            NearClipPlane = input.ReadFloat();
            break;
          }
          case 29: {
            FarClipPlane = input.ReadFloat();
            break;
          }
          case 37: {
            FieldOfView = input.ReadFloat();
            break;
          }
          case 40: {
            RenderingPath = (global::PLUME.Sample.Unity.RenderingPath) input.ReadEnum();
            break;
          }
          case 48: {
            AllowHdr = input.ReadBool();
            break;
          }
          case 56: {
            AllowMsaa = input.ReadBool();
            break;
          }
          case 64: {
            AllowDynamicResolution = input.ReadBool();
            break;
          }
          case 72: {
            ForceIntoRenderTexture = input.ReadBool();
            break;
          }
          case 85: {
            OrthographicSize = input.ReadFloat();
            break;
          }
          case 88: {
            Orthographic = input.ReadBool();
            break;
          }
          case 96: {
            OpaqueSortMode = (global::PLUME.Sample.Unity.OpaqueSortMode) input.ReadEnum();
            break;
          }
          case 104: {
            TransparencySortMode = (global::PLUME.Sample.Unity.TransparencySortMode) input.ReadEnum();
            break;
          }
          case 114: {
            if (transparencySortAxis_ == null) {
              TransparencySortAxis = new global::PLUME.Sample.Common.Vector3();
            }
            input.ReadMessage(TransparencySortAxis);
            break;
          }
          case 125: {
            Depth = input.ReadFloat();
            break;
          }
          case 133: {
            Aspect = input.ReadFloat();
            break;
          }
          case 136: {
            CullingMask = input.ReadInt32();
            break;
          }
          case 144: {
            EventMask = input.ReadInt32();
            break;
          }
          case 152: {
            LayerCullSpherical = input.ReadBool();
            break;
          }
          case 160: {
            CameraType = input.ReadUInt32();
            break;
          }
          case 170: {
            if (layerCullDistances_ == null) {
              LayerCullDistances = new global::PLUME.Sample.Unity.CameraLayerCullDistances();
            }
            input.ReadMessage(LayerCullDistances);
            break;
          }
          case 176: {
            UseOcclusionCulling = input.ReadBool();
            break;
          }
          case 186: {
            if (cullingMatrix_ == null) {
              CullingMatrix = new global::PLUME.Sample.Common.Matrix4x4();
            }
            input.ReadMessage(CullingMatrix);
            break;
          }
          case 194: {
            if (backgroundColor_ == null) {
              BackgroundColor = new global::PLUME.Sample.Common.Color();
            }
            input.ReadMessage(BackgroundColor);
            break;
          }
          case 200: {
            ClearFlags = input.ReadUInt32();
            break;
          }
          case 208: {
            DepthTextureMode = input.ReadUInt32();
            break;
          }
          case 216: {
            ClearStencilAfterLightingPass = input.ReadBool();
            break;
          }
          case 224: {
            UsePhysicalProperties = input.ReadBool();
            break;
          }
          case 234: {
            if (sensorSize_ == null) {
              SensorSize = new global::PLUME.Sample.Common.Vector2();
            }
            input.ReadMessage(SensorSize);
            break;
          }
          case 242: {
            if (lensShift_ == null) {
              LensShift = new global::PLUME.Sample.Common.Vector2();
            }
            input.ReadMessage(LensShift);
            break;
          }
          case 253: {
            FocalLength = input.ReadFloat();
            break;
          }
          case 256: {
            GateFit = (global::PLUME.Sample.Unity.CameraGateFitMode) input.ReadEnum();
            break;
          }
          case 266: {
            if (rect_ == null) {
              Rect = new global::PLUME.Sample.Common.Rect();
            }
            input.ReadMessage(Rect);
            break;
          }
          case 274: {
            if (pixelRect_ == null) {
              PixelRect = new global::PLUME.Sample.Common.Rect();
            }
            input.ReadMessage(PixelRect);
            break;
          }
          case 282: {
            if (targetTextureId_ == null) {
              TargetTextureId = new global::PLUME.Sample.Unity.AssetIdentifier();
            }
            input.ReadMessage(TargetTextureId);
            break;
          }
          case 288: {
            TargetDisplay = input.ReadInt32();
            break;
          }
          case 298: {
            if (worldToCameraMatrix_ == null) {
              WorldToCameraMatrix = new global::PLUME.Sample.Common.Matrix4x4();
            }
            input.ReadMessage(WorldToCameraMatrix);
            break;
          }
          case 306: {
            if (projectionMatrix_ == null) {
              ProjectionMatrix = new global::PLUME.Sample.Common.Matrix4x4();
            }
            input.ReadMessage(ProjectionMatrix);
            break;
          }
          case 314: {
            if (nonJitteredProjectionMatrix_ == null) {
              NonJitteredProjectionMatrix = new global::PLUME.Sample.Common.Matrix4x4();
            }
            input.ReadMessage(NonJitteredProjectionMatrix);
            break;
          }
          case 320: {
            UseJitteredProjectionMatrixForTransparentRendering = input.ReadBool();
            break;
          }
          case 333: {
            StereoSeparation = input.ReadFloat();
            break;
          }
          case 341: {
            StereoConvergence = input.ReadFloat();
            break;
          }
          case 344: {
            StereoTargetEye = (global::PLUME.Sample.Unity.CameraStereoTargetEyeMask) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CameraLayerCullDistances : pb::IMessage<CameraLayerCullDistances>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CameraLayerCullDistances> _parser = new pb::MessageParser<CameraLayerCullDistances>(() => new CameraLayerCullDistances());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CameraLayerCullDistances> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PLUME.Sample.Unity.CameraReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraLayerCullDistances() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraLayerCullDistances(CameraLayerCullDistances other) : this() {
      distances_ = other.distances_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CameraLayerCullDistances Clone() {
      return new CameraLayerCullDistances(this);
    }

    /// <summary>Field number for the "distances" field.</summary>
    public const int DistancesFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_distances_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> distances_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> Distances {
      get { return distances_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CameraLayerCullDistances);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CameraLayerCullDistances other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!distances_.Equals(other.distances_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= distances_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      distances_.WriteTo(output, _repeated_distances_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      distances_.WriteTo(ref output, _repeated_distances_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += distances_.CalculateSize(_repeated_distances_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CameraLayerCullDistances other) {
      if (other == null) {
        return;
      }
      distances_.Add(other.distances_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            distances_.AddEntriesFrom(input, _repeated_distances_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 13: {
            distances_.AddEntriesFrom(ref input, _repeated_distances_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
